# -*- coding: utf-8 -*-
"""
Board Widget cho Xiangqi GUI
Widget hi·ªÉn th·ªã b√†n c·ªù v√† x·ª≠ l√Ω t∆∞∆°ng t√°c ng∆∞·ªùi d√πng v·ªõi SVG support
"""

from PyQt5.QtWidgets import QWidget, QLabel
from PyQt5.QtCore import Qt, pyqtSignal, QPoint, QSize, QRect, QRectF
from PyQt5.QtGui import QPainter, QPen, QBrush, QPixmap, QFont, QColor
from ..utils.constants import *
from ..utils.svg_renderer import image_renderer


class BoardWidget(QWidget):
    """Widget hi·ªÉn th·ªã b√†n c·ªù t∆∞·ªõng v·ªõi PNG support"""

    # Signals
    piece_moved = pyqtSignal(str, str)  # from_pos, to_pos
    square_clicked = pyqtSignal(str)    # position
    # from_row, from_col, to_row, to_col
    move_made = pyqtSignal(int, int, int, int)

    def __init__(self):
        super().__init__()
        self.board_state = None
        self.selected_square = None
        self.possible_moves = []
        self.current_player = 'red'  # Th√™m current_player tracking
        self.is_flipped = False

        # Engine hints
        self.engine_hint = None  # Tuple (from_row, from_col, to_row, to_col)
        # Tuple (from_row, from_col, to_row, to_col) cho ponder move
        self.engine_ponder = None

        # SVG pixmaps cache
        self.board_pixmap = None
        self.piece_pixmaps = {}

        self.init_ui()
        self.load_png_assets()
        self._init_board_state()

    def init_ui(self):
        """Kh·ªüi t·∫°o UI"""
        # T√≠nh k√≠ch th∆∞·ªõc widget d·ª±a tr√™n SVG
        widget_width = BOARD_SVG_WIDTH + 2 * BOARD_MARGIN
        widget_height = BOARD_SVG_HEIGHT + 2 * BOARD_MARGIN

        self.setMinimumSize(widget_width, widget_height)
        # Cho ph√©p scale l√™n
        self.setMaximumSize(widget_width * 2, widget_height * 2)
        self.setMouseTracking(True)

    def load_png_assets(self):
        """Load v√† cache c√°c PNG assets"""
        # Load board PNG v·ªõi k√≠ch th∆∞·ªõc g·ªëc
        board_size = QSize(BOARD_SVG_WIDTH, BOARD_SVG_HEIGHT)

        # S·ª≠ d·ª•ng PNG g·ªëc (c√≥ text ƒë√∫ng)
        self.board_pixmap = image_renderer.render_board_png(board_size)
        print("üîÑ S·ª≠ d·ª•ng PNG rendering")

        # N·∫øu kh√¥ng c√≥ board_pixmap, fallback v·ªÅ method g·ªëc
        if not self.board_pixmap:
            self.board_pixmap = image_renderer.render_board_png(board_size)
            print("‚ö†Ô∏è Fallback to original PNG rendering")

        if not self.board_pixmap:
            print("‚ùå Kh√¥ng th·ªÉ load PNG b√†n c·ªù!")
        else:
            print("‚úì Load PNG b√†n c·ªù th√†nh c√¥ng")

        # Load piece PNGs v·ªõi k√≠ch th∆∞·ªõc ph√π h·ª£p
        piece_size = QSize(PIECE_SIZE, PIECE_SIZE)

        pieces = ['R', 'N', 'B', 'A', 'K', 'C', 'P',  # Qu√¢n ƒë·ªè
                  'r', 'n', 'b', 'a', 'k', 'c', 'p']  # Qu√¢n ƒëen

        for piece in pieces:
            pixmap = image_renderer.render_piece_png(piece, piece_size)
            if pixmap:
                self.piece_pixmaps[piece] = pixmap
                print(f"‚úì Load PNG qu√¢n {piece} ({PIECE_SIZE}px)")
            else:
                print(f"‚ùå Kh√¥ng th·ªÉ load PNG cho qu√¢n {piece}")

    def _init_board_state(self):
        """Kh·ªüi t·∫°o tr·∫°ng th√°i b√†n c·ªù t·ª´ FEN"""
        board = [[None for _ in range(BOARD_WIDTH)]
                 for _ in range(BOARD_HEIGHT)]

        # Parse FEN ƒë·ªÉ thi·∫øt l·∫≠p v·ªã tr√≠ ban ƒë·∫ßu
        fen_parts = INITIAL_POSITION.split()
        board_fen = fen_parts[0]

        row = 0
        col = 0

        for char in board_fen:
            if char == '/':
                row += 1
                col = 0
            elif char.isdigit():
                col += int(char)
            else:
                if row < BOARD_HEIGHT and col < BOARD_WIDTH:
                    board[row][col] = char
                col += 1

        self.board_state = board

    def reset_board(self):
        """Reset b√†n c·ªù v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu"""
        self._init_board_state()  # G·ªçi method n√†y s·∫Ω t·ª± ƒë·ªông set self.board_state
        self.selected_square = None
        self.possible_moves = []
        self.current_player = 'red'  # Reset v·ªÅ l∆∞·ª£t ƒë·ªè
        self.update()

    def paintEvent(self, event):
        """V·∫Ω b√†n c·ªù"""
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)

        # V·∫Ω n·ªÅn
        painter.fillRect(self.rect(), QBrush(QColor(BOARD_COLOR)))

        # V·∫Ω b√†n c·ªù PNG
        self._draw_board_png(painter)

        # V·∫Ω c√°c qu√¢n c·ªù PNG
        self._draw_pieces_png(painter)

        # V·∫Ω selection v√† possible moves
        self._draw_selection(painter)

        # V·∫Ω engine hint arrow
        self._draw_engine_hint(painter)

        # V·∫Ω ponder move arrow
        self._draw_engine_ponder(painter)

        painter.end()

    def _draw_board_png(self, painter):
        """V·∫Ω b√†n c·ªù t·ª´ PNG"""
        if self.board_pixmap:
            board_rect = self._get_board_rect()

            # T√≠nh k√≠ch th∆∞·ªõc target v·ªõi UI scale factor
            svg_aspect = BOARD_SVG_WIDTH / BOARD_SVG_HEIGHT  # 900/1000 = 0.9

            # Scale down 50% nh∆∞ng gi·ªØ aspect ratio
            max_width = int(board_rect.width() * UI_SCALE_FACTOR)
            max_height = int(board_rect.height() * UI_SCALE_FACTOR)

            # Fit v√†o k√≠ch th∆∞·ªõc scaled v·ªõi ƒë√∫ng aspect ratio
            if max_width / max_height > svg_aspect:
                # Gi·ªõi h·∫°n b·ªüi height
                target_height = max_height
                target_width = int(target_height * svg_aspect)
            else:
                # Gi·ªõi h·∫°n b·ªüi width
                target_width = max_width
                target_height = int(target_width / svg_aspect)

            # Center board
            x_offset = (board_rect.width() - target_width) // 2
            y_offset = (board_rect.height() - target_height) // 2

            target_rect = QRect(
                board_rect.left() + x_offset,
                board_rect.top() + y_offset,
                target_width,
                target_height
            )

            # Scale SVG v·ªõi smooth transformation
            scaled_pixmap = self.board_pixmap.scaled(
                target_rect.size(),
                Qt.KeepAspectRatio,
                Qt.SmoothTransformation
            )

            # L∆∞u target_rect ƒë·ªÉ coordinate conversion s·ª≠ d·ª•ng ƒë√∫ng
            self._actual_board_rect = target_rect

            painter.drawPixmap(target_rect, scaled_pixmap)

            # V·∫Ω text overlay n·∫øu text trong SVG b·ªã sai
            ENABLE_TEXT_OVERLAY = False  # Set False n·∫øu SVG text ƒë√£ ƒë√∫ng
            if ENABLE_TEXT_OVERLAY:
                self._draw_river_text_overlay(painter, target_rect)
        else:
            # Fallback - v·∫Ω b√†n c·ªù c∆° b·∫£n n·∫øu kh√¥ng c√≥ SVG
            self._actual_board_rect = self._get_board_rect()
            self._draw_fallback_board(painter)

    def _draw_river_text_overlay(self, painter, board_rect):
        """V·∫Ω text Ê•öÊ≤≥Êº¢Áïå overlay n·∫øu SVG text b·ªã sai"""
        # Font cho ch·ªØ H√°n
        # 4% chi·ªÅu cao board
        font_size = max(12, int(board_rect.height() * 0.04))
        font = QFont("SimHei", font_size, QFont.Bold)

        # Fallback fonts
        if not QFont(font).exactMatch():
            for font_family in ["Microsoft YaHei", "WenQuanYi Micro Hei", "Noto Sans CJK SC", "Arial Unicode MS"]:
                font = QFont(font_family, font_size, QFont.Bold)
                if QFont(font).exactMatch():
                    break
            else:
                font = QFont("Arial", font_size, QFont.Bold)

        painter.setFont(font)
        painter.setPen(QPen(QColor(0, 0, 0), 2))

        # V·ªã tr√≠ text ·ªü gi·ªØa board (river area)
        river_y = board_rect.top() + int(board_rect.height() * 0.52)

        # "Ê•öÊ≤≥" b√™n tr√°i
        chu_he_x = board_rect.left() + int(board_rect.width() * 0.22)
        painter.drawText(chu_he_x, river_y, "Ê•öÊ≤≥")

        # "Êº¢Áïå" b√™n ph·∫£i
        han_jie_x = board_rect.left() + int(board_rect.width() * 0.65)
        painter.drawText(han_jie_x, river_y, "Êº¢Áïå")

    def _draw_fallback_board(self, painter):
        """V·∫Ω b√†n c·ªù c∆° b·∫£n n·∫øu kh√¥ng c√≥ SVG"""
        pen = QPen(QColor(GRID_COLOR), 2)
        painter.setPen(pen)

        board_rect = self._get_board_rect()

        # V·∫Ω ƒë∆∞·ªùng ngang
        for row in range(BOARD_HEIGHT + 1):
            if row == 5:  # ƒê∆∞·ªùng gi·ªØa s√¥ng
                continue
            y = int(board_rect.top() + row *
                    (board_rect.height() / BOARD_HEIGHT))
            painter.drawLine(board_rect.left(), y, board_rect.right(), y)

        # V·∫Ω ƒë∆∞·ªùng d·ªçc
        for col in range(BOARD_WIDTH + 1):
            x = int(board_rect.left() + col *
                    (board_rect.width() / BOARD_WIDTH))
            # V·∫Ω ƒë∆∞·ªùng d·ªçc kh√¥ng qua s√¥ng ·ªü gi·ªØa
            mid_y = int(board_rect.top() + 4.5 *
                        (board_rect.height() / BOARD_HEIGHT))
            painter.drawLine(x, board_rect.top(), x, mid_y)
            painter.drawLine(
                x, int(mid_y + (board_rect.height() / BOARD_HEIGHT)), x, board_rect.bottom())

        # V·∫Ω cung th√†nh
        self._draw_palace_lines(painter, board_rect)

    def _draw_palace_lines(self, painter, board_rect):
        """V·∫Ω ƒë∆∞·ªùng ch√©o cung th√†nh"""
        pen = QPen(QColor(GRID_COLOR), 2)
        painter.setPen(pen)

        cell_w = board_rect.width() / BOARD_WIDTH
        cell_h = board_rect.height() / BOARD_HEIGHT

        # Cung tr√™n (ƒëen)
        top_left_x = int(board_rect.left() + 3 * cell_w)
        top_right_x = int(board_rect.left() + 5 * cell_w)
        top_top_y = int(board_rect.top())
        top_bottom_y = int(board_rect.top() + 2 * cell_h)

        painter.drawLine(top_left_x, top_top_y, top_right_x, top_bottom_y)
        painter.drawLine(top_right_x, top_top_y, top_left_x, top_bottom_y)

        # Cung d∆∞·ªõi (ƒë·ªè)
        bottom_left_x = int(board_rect.left() + 3 * cell_w)
        bottom_right_x = int(board_rect.left() + 5 * cell_w)
        bottom_top_y = int(board_rect.top() + 7 * cell_h)
        bottom_bottom_y = int(board_rect.top() + 9 * cell_h)

        painter.drawLine(bottom_left_x, bottom_top_y,
                         bottom_right_x, bottom_bottom_y)
        painter.drawLine(bottom_right_x, bottom_top_y,
                         bottom_left_x, bottom_bottom_y)

    def _draw_pieces_png(self, painter):
        """V·∫Ω c√°c qu√¢n c·ªù t·ª´ PNG"""
        # S·ª≠ d·ª•ng actual board rect sau khi scale PNG
        board_rect = getattr(self, '_actual_board_rect',
                             self._get_board_rect())

        for row in range(BOARD_HEIGHT):
            for col in range(BOARD_WIDTH):
                piece = self.board_state[row][col]
                if piece:
                    self._draw_piece_png(painter, piece, row, col, board_rect)

    def _draw_piece_png(self, painter, piece, row, col, board_rect):
        """V·∫Ω m·ªôt qu√¢n c·ªù t·ª´ PNG"""
        # Option: Force s·ª≠ d·ª•ng PNG pieces
        FORCE_FALLBACK_PIECES = False  # Set True ƒë·ªÉ d√πng custom pieces

        pixmap = self.piece_pixmaps.get(
            piece) if not FORCE_FALLBACK_PIECES else None

        if not pixmap:
            # Fallback - v·∫Ω qu√¢n c·ªù text ƒë·∫πp h∆°n
            self._draw_piece_fallback(painter, piece, row, col, board_rect)
            return

        # S·ª≠ d·ª•ng h√†m coordinate conversion m·ªõi
        center_x, center_y = board_coords_to_pixel(row, col, board_rect)

        # Scale piece size theo t·ª∑ l·ªá board
        scale_factor = min(board_rect.width() / BOARD_SVG_WIDTH,
                           board_rect.height() / BOARD_SVG_HEIGHT)
        scaled_piece_size = int(PIECE_SIZE * scale_factor)

        scaled_pixmap = pixmap.scaled(
            scaled_piece_size, scaled_piece_size,
            Qt.KeepAspectRatio, Qt.SmoothTransformation
        )

        # T√≠nh v·ªã tr√≠ top-left ƒë·ªÉ center qu√¢n c·ªù
        x = int(center_x - scaled_piece_size // 2)
        y = int(center_y - scaled_piece_size // 2)

        # Debug piece position cho qu√¢n ƒë·∫ßu ti√™n
        if row == 0 and col == 0:
            print(
                f"üîç Piece {piece} at ({row},{col}): pixel=({center_x:.0f},{center_y:.0f}), size={scaled_piece_size}")

        painter.drawPixmap(x, y, scaled_pixmap)

    def _draw_selection(self, painter):
        """V·∫Ω highlight cho √¥ ƒë∆∞·ª£c ch·ªçn v√† possible moves"""
        if self.selected_square is not None:
            # selected_square gi·ªù l√† tuple (row, col) thay v√¨ string
            row, col = self.selected_square

            # V·∫Ω corner highlights cho √¥ ƒë∆∞·ª£c ch·ªçn
            board_rect = getattr(self, '_actual_board_rect',
                                 self._get_board_rect())
            pixel_x, pixel_y = board_coords_to_pixel(row, col, board_rect)

            # T√≠nh k√≠ch th∆∞·ªõc √¥
            square_width = board_rect.width() / 8
            square_height = board_rect.height() / 9

            # V·∫Ω corner highlights thay v√¨ to√†n b·ªô h√¨nh vu√¥ng
            corner_size = min(square_width, square_height) * \
                0.3  # 30% k√≠ch th∆∞·ªõc √¥
            corner_thickness = 4

            painter.setPen(
                QPen(QColor(255, 255, 0), corner_thickness))  # Vi·ªÅn v√†ng
            painter.setBrush(QBrush())  # Kh√¥ng c√≥ fill

            # T√≠nh v·ªã tr√≠ g√≥c
            left = pixel_x - square_width/2
            right = pixel_x + square_width/2
            top = pixel_y - square_height/2
            bottom = pixel_y + square_height/2

            # V·∫Ω 4 g√≥c
            # G√≥c tr√™n tr√°i
            painter.drawLine(int(left), int(top), int(
                left + corner_size), int(top))
            painter.drawLine(int(left), int(top), int(
                left), int(top + corner_size))

            # G√≥c tr√™n ph·∫£i
            painter.drawLine(int(right - corner_size),
                             int(top), int(right), int(top))
            painter.drawLine(int(right), int(top), int(
                right), int(top + corner_size))

            # G√≥c d∆∞·ªõi tr√°i
            painter.drawLine(int(left), int(
                bottom - corner_size), int(left), int(bottom))
            painter.drawLine(int(left), int(bottom), int(
                left + corner_size), int(bottom))

            # G√≥c d∆∞·ªõi ph·∫£i
            painter.drawLine(int(right), int(
                bottom - corner_size), int(right), int(bottom))
            painter.drawLine(int(right - corner_size),
                             int(bottom), int(right), int(bottom))

        # V·∫Ω possible moves v·ªõi dots
        if self.possible_moves:
            board_rect = getattr(self, '_actual_board_rect',
                                 self._get_board_rect())

            for move_row, move_col in self.possible_moves:
                pixel_x, pixel_y = board_coords_to_pixel(
                    move_row, move_col, board_rect)

                # Ki·ªÉm tra c√≥ qu√¢n ƒë·ªãch ·ªü v·ªã tr√≠ n√†y kh√¥ng
                target_piece = self.board_state[move_row][move_col]

                if target_piece is not None:
                    # C√≥ qu√¢n ƒë·ªãch - v·∫Ω ch·∫•m t√≠m m·ªù (capture move)
                    # Vi·ªÅn t√≠m m·ªù
                    painter.setPen(QPen(QColor(128, 0, 128, 180), 2))
                    # Fill t√≠m m·ªù h∆°n
                    painter.setBrush(QBrush(QColor(128, 0, 128, 100)))
                else:
                    # √î tr·ªëng - v·∫Ω ch·∫•m tr·∫Øng m·ªù (normal move)
                    # Vi·ªÅn tr·∫Øng m·ªù
                    painter.setPen(QPen(QColor(255, 255, 255, 200), 2))
                    # Fill tr·∫Øng m·ªù
                    painter.setBrush(QBrush(QColor(255, 255, 255, 120)))

                # V·∫Ω ch·∫•m tr√≤n 10px
                dot_size = 10
                painter.drawEllipse(
                    int(pixel_x - dot_size/2),
                    int(pixel_y - dot_size/2),
                    dot_size,
                    dot_size
                )

    def _get_board_rect(self):
        """L·∫•y rectangle c·ªßa b√†n c·ªù"""
        return self.rect().adjusted(BOARD_MARGIN, BOARD_MARGIN, -BOARD_MARGIN, -BOARD_MARGIN)

    def mousePressEvent(self, event):
        """X·ª≠ l√Ω click chu·ªôt tr√™n b√†n c·ªù"""
        if event.button() == Qt.LeftButton:
            # Chuy·ªÉn ƒë·ªïi pixel coordinates th√†nh board coordinates
            row, col = self.pixel_to_board_coords(event.x(), event.y())

            if row is not None and col is not None:
                print(f"üîç Click at board position ({row},{col})")

                if self.selected_square is None:
                    # Ch·ªçn qu√¢n c·ªù
                    piece = self.board_state[row][col]
                    if piece is not None:
                        # Import GameState ƒë·ªÉ ki·ªÉm tra
                        from ..core.game_state import GameState
                        temp_game_state = GameState()
                        temp_game_state.board = [r[:]
                                                 for r in self.board_state]
                        # S·ª≠ d·ª•ng current_player c·ªßa BoardWidget
                        temp_game_state.current_player = self.current_player

                        # Ki·ªÉm tra c√≥ ph·∫£i qu√¢n c·ªßa player hi·ªán t·∫°i kh√¥ng
                        if temp_game_state._is_player_piece(piece, temp_game_state.current_player):
                            self.selected_square = (row, col)
                            self.possible_moves = self.get_possible_moves(
                                row, col)
                            print(
                                f"‚úì Ch·ªçn qu√¢n {piece} t·∫°i ({row},{col}), c√≥ {len(self.possible_moves)} n∆∞·ªõc ƒëi")
                        else:
                            print(
                                f"‚ùå Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa qu√¢n {piece} (l∆∞·ª£t hi·ªán t·∫°i: {self.current_player})")
                else:
                    # Th·ª±c hi·ªán n∆∞·ªõc ƒëi
                    from_row, from_col = self.selected_square

                    # Import GameState ƒë·ªÉ validate
                    from ..core.game_state import GameState
                    temp_game_state = GameState()
                    temp_game_state.board = [r[:] for r in self.board_state]
                    temp_game_state.current_player = self.current_player

                    if temp_game_state.is_valid_move(from_row, from_col, row, col):
                        # Th·ª±c hi·ªán n∆∞·ªõc ƒëi
                        piece = self.board_state[from_row][from_col]
                        captured_piece = self.board_state[row][col]

                        self.board_state[row][col] = piece
                        self.board_state[from_row][from_col] = None

                        print(
                            f"‚úì Di chuy·ªÉn {piece} t·ª´ ({from_row},{from_col}) ƒë·∫øn ({row},{col})")
                        if captured_piece:
                            print(f"‚úì B·∫Øt qu√¢n {captured_piece}")

                        # Emit signal cho main window
                        self.move_made.emit(from_row, from_col, row, col)

                        # Clear selection
                        self.selected_square = None
                        self.possible_moves = []
                    else:
                        print(
                            f"‚ùå N∆∞·ªõc ƒëi kh√¥ng h·ª£p l·ªá t·ª´ ({from_row},{from_col}) ƒë·∫øn ({row},{col})")

                        # N·∫øu click v√†o qu√¢n kh√°c c·ªßa m√¨nh, chuy·ªÉn selection
                        piece = self.board_state[row][col]
                        if piece is not None and temp_game_state._is_player_piece(piece, temp_game_state.current_player):
                            self.selected_square = (row, col)
                            self.possible_moves = self.get_possible_moves(
                                row, col)
                            print(
                                f"üîÑ Chuy·ªÉn ch·ªçn sang qu√¢n {piece} t·∫°i ({row},{col})")
                        else:
                            # Clear selection
                            self.selected_square = None
                            self.possible_moves = []

                self.update()  # Redraw board

    def pixel_to_board_coords(self, pixel_x, pixel_y):
        """Chuy·ªÉn ƒë·ªïi t·ªça ƒë·ªô pixel th√†nh coordinates b√†n c·ªù"""
        # S·ª≠ d·ª•ng actual board rect sau khi scale SVG
        board_rect = getattr(self, '_actual_board_rect',
                             self._get_board_rect())

        if not board_rect.contains(QPoint(pixel_x, pixel_y)):
            return None, None

        return pixel_to_board_coords(pixel_x, pixel_y, board_rect)

    def _coords_to_pos(self, row, col):
        """Chuy·ªÉn ƒë·ªïi t·ªça ƒë·ªô th√†nh position string"""
        return f"{chr(ord('a') + col)}{row}"

    def _pos_to_coords(self, pos):
        """Chuy·ªÉn ƒë·ªïi position string th√†nh t·ªça ƒë·ªô"""
        col = ord(pos[0]) - ord('a')
        row = int(pos[1])
        return row, col

    def get_possible_moves(self, row, col):
        """
        L·∫•y danh s√°ch c√°c n∆∞·ªõc ƒëi c√≥ th·ªÉ t·ª´ v·ªã tr√≠ (row, col)

        Args:
            row: Row index
            col: Column index

        Returns:
            list: List of possible move positions (tuples of (row, col))
        """
        possible_moves = []
        piece = self.board_state[row][col]

        if piece is None:
            return possible_moves

        # Import GameState ƒë·ªÉ validate moves
        from ..core.game_state import GameState
        temp_game_state = GameState()
        temp_game_state.board = [r[:] for r in self.board_state]
        temp_game_state.current_player = self.current_player

        # Ki·ªÉm tra t·∫•t c·∫£ c√°c √¥ tr√™n b√†n c·ªù
        for to_row in range(10):
            for to_col in range(9):
                if temp_game_state.is_valid_move(row, col, to_row, to_col):
                    possible_moves.append((to_row, to_col))

        return possible_moves

    def undo_last_move(self):
        """Ho√†n t√°c n∆∞·ªõc ƒëi cu·ªëi"""
        # TODO: Implement undo logic
        self.update()

    def reload_png_assets(self):
        """Reload l·∫°i c√°c PNG assets"""
        image_renderer.clear_cache()
        self.load_png_assets()
        self.update()

    def _draw_pieces_svg(self, painter):
        """V·∫Ω c√°c qu√¢n c·ªù t·ª´ SVG"""
        # S·ª≠ d·ª•ng actual board rect sau khi scale SVG
        board_rect = getattr(self, '_actual_board_rect',
                             self._get_board_rect())

        for row in range(BOARD_HEIGHT):
            for col in range(BOARD_WIDTH):
                piece = self.board_state[row][col]
                if piece:
                    self._draw_piece_svg(painter, piece, row, col, board_rect)

    def _draw_piece_svg(self, painter, piece, row, col, board_rect):
        """V·∫Ω m·ªôt qu√¢n c·ªù t·ª´ PNG"""
        # Option: Force s·ª≠ d·ª•ng PNG pieces
        FORCE_FALLBACK_PIECES = False  # Set True ƒë·ªÉ d√πng custom pieces

        pixmap = self.piece_pixmaps.get(
            piece) if not FORCE_FALLBACK_PIECES else None

        if not pixmap:
            # Fallback - v·∫Ω qu√¢n c·ªù text ƒë·∫πp h∆°n
            self._draw_piece_fallback(painter, piece, row, col, board_rect)
            return

        # S·ª≠ d·ª•ng h√†m coordinate conversion m·ªõi
        center_x, center_y = board_coords_to_pixel(row, col, board_rect)

        # Scale piece size theo t·ª∑ l·ªá board
        scale_factor = min(board_rect.width() / BOARD_SVG_WIDTH,
                           board_rect.height() / BOARD_SVG_HEIGHT)
        scaled_piece_size = int(PIECE_SIZE * scale_factor)

        scaled_pixmap = pixmap.scaled(
            scaled_piece_size, scaled_piece_size,
            Qt.KeepAspectRatio, Qt.SmoothTransformation
        )

        # T√≠nh v·ªã tr√≠ top-left ƒë·ªÉ center qu√¢n c·ªù
        x = int(center_x - scaled_piece_size // 2)
        y = int(center_y - scaled_piece_size // 2)

        # Debug piece position cho qu√¢n ƒë·∫ßu ti√™n
        if row == 0 and col == 0:
            print(
                f"üîç Piece {piece} at ({row},{col}): pixel=({center_x:.0f},{center_y:.0f}), size={scaled_piece_size}")

        painter.drawPixmap(x, y, scaled_pixmap)

    def _draw_piece_fallback(self, painter, piece, row, col, board_rect):
        """V·∫Ω qu√¢n c·ªù fallback d·∫°ng text v·ªõi background ƒë·∫πp h∆°n"""
        center_x, center_y = board_coords_to_pixel(row, col, board_rect)

        # Scale piece size theo t·ª∑ l·ªá board
        scale_factor = min(board_rect.width() / BOARD_SVG_WIDTH,
                           board_rect.height() / BOARD_SVG_HEIGHT)
        scaled_piece_size = int(PIECE_SIZE * scale_factor)
        radius = scaled_piece_size // 2

        # M√†u qu√¢n c·ªù
        if piece.isupper():  # Qu√¢n ƒë·ªè
            circle_color = QColor("#FFD700")  # Gold
            border_color = QColor("#DC143C")  # Crimson
            text_color = QColor("#8B0000")    # Dark red
        else:  # Qu√¢n ƒëen
            circle_color = QColor("#F5F5DC")  # Beige
            border_color = QColor("#2F4F4F")  # Dark slate gray
            text_color = QColor("#000000")    # Black

        # V·∫Ω background circle
        painter.setBrush(QBrush(circle_color))
        painter.setPen(QPen(border_color, 3))
        painter.drawEllipse(int(center_x - radius), int(center_y - radius),
                            scaled_piece_size, scaled_piece_size)

        # V·∫Ω k√Ω t·ª± qu√¢n c·ªù
        font_size = max(8, int(radius * 0.8))
        font = QFont("SimHei", font_size, QFont.Bold)

        # Fallback font
        if not font.exactMatch():
            font = QFont("Arial Unicode MS", font_size, QFont.Bold)
            if not font.exactMatch():
                font = QFont("Arial", font_size, QFont.Bold)

        painter.setFont(font)
        painter.setPen(QPen(text_color, 2))

        piece_text = PIECE_NAMES_VN.get(piece, piece)

        # Center text trong circle
        text_rect = painter.fontMetrics().boundingRect(piece_text)
        text_x = int(center_x - text_rect.width() / 2)
        text_y = int(center_y + text_rect.height() / 3)

        painter.drawText(text_x, text_y, piece_text)

    def load_fen_position(self, fen_string):
        """
        Load position t·ª´ FEN string

        Args:
            fen_string: FEN notation

        Returns:
            bool: True n·∫øu load th√†nh c√¥ng
        """
        from ..core.game_state import GameState

        # T·∫°o temporary game state ƒë·ªÉ parse FEN
        temp_game_state = GameState()
        if temp_game_state.load_from_fen(fen_string):
            # Update board state
            self.board_state = temp_game_state.get_board()

            # Clear selection
            self.selected_square = None
            self.possible_moves = []

            # Redraw
            self.update()
            return True
        else:
            print("‚ùå Kh√¥ng th·ªÉ load FEN")
            return False

    def get_current_fen(self):
        """
        L·∫•y FEN c·ªßa position hi·ªán t·∫°i

        Returns:
            str: FEN notation
        """
        from ..core.game_state import GameState

        # T·∫°o game state t·ª´ board hi·ªán t·∫°i
        game_state = GameState()
        game_state.board = [row[:] for row in self.board_state]  # Copy board

        return game_state.to_fen()

    def set_current_player(self, player):
        """
        C·∫≠p nh·∫≠t player hi·ªán t·∫°i

        Args:
            player: 'red' ho·∫∑c 'black'
        """
        self.current_player = player
        print(f"üîÑ BoardWidget: Chuy·ªÉn l∆∞·ª£t sang {player}")

    def set_engine_hint(self, hint_move, ponder_move=None):
        """
        C·∫≠p nh·∫≠t g·ª£i √Ω t·ª´ engine

        Args:
            hint_move: String move notation (e.g., "c2d2") ho·∫∑c None ƒë·ªÉ clear
            ponder_move: String ponder move notation (e.g., "g6g5") ho·∫∑c None
        """
        if hint_move and len(hint_move) == 4:
            # Parse UCI move notation: "c2d2" means c2 -> d2
            # UCI format: file (a-i) + rank (0-9)
            # Trong c·ªù t∆∞·ªõng: rank 0 = ph√≠a ƒë·ªè (h√†ng 9 trong board), rank 9 = ph√≠a ƒëen (h√†ng 0 trong board)
            try:
                # From position
                from_file = hint_move[0]  # 'a' ƒë·∫øn 'i' (c·ªôt)
                from_rank = hint_move[1]  # '0' ƒë·∫øn '9' (h√†ng)

                # To position
                to_file = hint_move[2]    # 'a' ƒë·∫øn 'i' (c·ªôt)
                to_rank = hint_move[3]    # '0' ƒë·∫øn '9' (h√†ng)

                # Chuy·ªÉn ƒë·ªïi sang board coordinates (0-based)
                # File: a=0, b=1, c=2, ..., i=8
                from_col = ord(from_file) - ord('a')
                to_col = ord(to_file) - ord('a')

                # Rank: engine 0-9 c·∫ßn ƒë·∫£o ng∆∞·ª£c th√†nh board 9-0
                # Engine rank 0 (ƒë·ªè) = board row 9
                # Engine rank 9 (ƒëen) = board row 0
                from_row = 9 - int(from_rank)
                to_row = 9 - int(to_rank)

                # Validate coordinates
                if (0 <= from_row < BOARD_HEIGHT and 0 <= from_col < BOARD_WIDTH and
                        0 <= to_row < BOARD_HEIGHT and 0 <= to_col < BOARD_WIDTH):

                    self.engine_hint = (from_row, from_col, to_row, to_col)
                    print(f"ü§ñ Engine g·ª£i √Ω: {hint_move}")
                    print(
                        f"   Engine coords: ({from_file}{from_rank}) -> ({to_file}{to_rank})")
                    print(
                        f"   Board coords: ({from_row},{from_col}) -> ({to_row},{to_col})")
                else:
                    print(f"‚ùå T·ªça ƒë·ªô engine hint kh√¥ng h·ª£p l·ªá: {hint_move}")
                    self.engine_hint = None

            except (ValueError, IndexError) as e:
                print(f"‚ùå L·ªói parse engine move {hint_move}: {e}")
                self.engine_hint = None
        else:
            self.engine_hint = None

        # Parse ponder move
        if ponder_move and len(ponder_move) == 4:
            try:
                # From position
                from_file = ponder_move[0]
                from_rank = ponder_move[1]
                # To position
                to_file = ponder_move[2]
                to_rank = ponder_move[3]

                # Chuy·ªÉn ƒë·ªïi sang board coordinates
                from_col = ord(from_file) - ord('a')
                to_col = ord(to_file) - ord('a')
                from_row = 9 - int(from_rank)
                to_row = 9 - int(to_rank)

                # Validate coordinates
                if (0 <= from_row < BOARD_HEIGHT and 0 <= from_col < BOARD_WIDTH and
                        0 <= to_row < BOARD_HEIGHT and 0 <= to_col < BOARD_WIDTH):

                    self.engine_ponder = (from_row, from_col, to_row, to_col)
                    print(f"ü§ñ Engine ponder: {ponder_move}")
                    print(
                        f"   Ponder coords: ({from_row},{from_col}) -> ({to_row},{to_col})")
                else:
                    print(f"‚ùå T·ªça ƒë·ªô ponder kh√¥ng h·ª£p l·ªá: {ponder_move}")
                    self.engine_ponder = None

            except (ValueError, IndexError) as e:
                print(f"‚ùå L·ªói parse ponder move {ponder_move}: {e}")
                self.engine_ponder = None
        else:
            self.engine_ponder = None

        self.update()  # Redraw ƒë·ªÉ hi·ªÉn th·ªã hint

    def clear_engine_hint(self):
        """X√≥a g·ª£i √Ω engine"""
        self.engine_hint = None
        self.engine_ponder = None
        self.update()

    def _draw_engine_hint(self, painter):
        """V·∫Ω arrow ƒë·ªÉ hi·ªÉn th·ªã g·ª£i √Ω t·ª´ engine"""
        if self.engine_hint:
            from_row, from_col, to_row, to_col = self.engine_hint

            board_rect = getattr(self, '_actual_board_rect',
                                 self._get_board_rect())
            from_x, from_y = board_coords_to_pixel(
                from_row, from_col, board_rect)
            to_x, to_y = board_coords_to_pixel(to_row, to_col, board_rect)

            # Debug info
            print(
                f"üèπ V·∫Ω m≈©i t√™n hint: ({from_row},{from_col}) -> ({to_row},{to_col})")
            print(
                f"   Pixel: ({from_x:.0f},{from_y:.0f}) -> ({to_x:.0f},{to_y:.0f})")
            print(f"   Board rect: {board_rect}")

            # Ch·ªçn m√†u d·ª±a tr√™n l∆∞·ª£t ch∆°i hi·ªán t·∫°i v·ªõi transparency
            if self.current_player == 'red':
                # L∆∞·ª£t ƒë·ªè -> m√†u t√≠m v·ªõi alpha 120 (47% opacity)
                arrow_color = QColor(128, 0, 128, 120)  # Purple with alpha
            else:
                # L∆∞·ª£t ƒëen -> m√†u xanh v·ªõi alpha 120 (47% opacity)
                arrow_color = QColor(0, 100, 255, 120)  # Blue with alpha

            # V·∫Ω m≈©i t√™n v·ªõi m√†u trong su·ªët theo l∆∞·ª£t ch∆°i
            painter.setPen(QPen(arrow_color, 5))  # ƒê·ªô d√†y 5px
            painter.setBrush(QBrush(arrow_color))

            # T√≠nh to√°n vector v√† ƒë·ªô d√†i
            import math
            dx = to_x - from_x
            dy = to_y - from_y
            length = math.sqrt(dx*dx + dy*dy)

            if length > 0:
                # Normalize vector
                dx_norm = dx / length
                dy_norm = dy / length

                # K√≠ch th∆∞·ªõc ƒë·∫ßu m≈©i t√™n
                arrow_length = 15  # ƒê·ªô d√†i ƒë·∫ßu m≈©i t√™n
                arrow_width = 8   # ƒê·ªô r·ªông ƒë·∫ßu m≈©i t√™n

                start_x = from_x + dx_norm
                start_y = from_y + dy_norm
                end_x = to_x - dx_norm
                end_y = to_y - dy_norm

                # V·∫Ω th√¢n m≈©i t√™n
                painter.drawLine(int(start_x), int(
                    start_y), int(end_x), int(end_y))

                # T√≠nh ƒëi·ªÉm ƒë·∫ßu m≈©i t√™n
                arrow_tip_x = end_x
                arrow_tip_y = end_y

                # T√≠nh 2 ƒëi·ªÉm c√°nh m≈©i t√™n
                base_x = end_x - arrow_length * dx_norm
                base_y = end_y - arrow_length * dy_norm

                # Vector vu√¥ng g√≥c
                perp_x = -dy_norm * arrow_width
                perp_y = dx_norm * arrow_width

                wing1_x = base_x + perp_x
                wing1_y = base_y + perp_y
                wing2_x = base_x - perp_x
                wing2_y = base_y - perp_y

                # V·∫Ω ƒë·∫ßu m≈©i t√™n (tam gi√°c)
                from PyQt5.QtGui import QPolygonF
                from PyQt5.QtCore import QPointF

                arrow_head = QPolygonF([
                    QPointF(arrow_tip_x, arrow_tip_y),
                    QPointF(wing1_x, wing1_y),
                    QPointF(wing2_x, wing2_y)
                ])

                painter.drawPolygon(arrow_head)

                # V·∫Ω circle nh·ªè ·ªü ƒëi·ªÉm b·∫Øt ƒë·∫ßu ƒë·ªÉ ƒë√°nh d·∫•u
                circle_radius = 6
                painter.setPen(QPen(arrow_color, 2))
                painter.drawEllipse(int(start_x - circle_radius), int(start_y - circle_radius),
                                    circle_radius * 2, circle_radius * 2)

    def _draw_engine_ponder(self, painter):
        """V·∫Ω arrow ƒë·ªÉ hi·ªÉn th·ªã ponder move t·ª´ engine"""
        if self.engine_ponder:
            from_row, from_col, to_row, to_col = self.engine_ponder

            board_rect = getattr(self, '_actual_board_rect',
                                 self._get_board_rect())
            from_x, from_y = board_coords_to_pixel(
                from_row, from_col, board_rect)
            to_x, to_y = board_coords_to_pixel(to_row, to_col, board_rect)

            # Debug info
            print(
                f"üèπ V·∫Ω m≈©i t√™n ponder: ({from_row},{from_col}) -> ({to_row},{to_col})")

            # Ch·ªçn m√†u cho ponder move (ƒë·ªëi ph∆∞∆°ng c·ªßa current_player)
            if self.current_player == 'red':
                # L∆∞·ª£t ƒë·ªè -> ponder cho ƒëen -> m√†u xanh m·ªù h∆°n
                ponder_color = QColor(0, 100, 255, 80)  # Blue with lower alpha
            else:
                # L∆∞·ª£t ƒëen -> ponder cho ƒë·ªè -> m√†u t√≠m m·ªù h∆°n
                # Purple with lower alpha
                ponder_color = QColor(128, 0, 128, 80)

            # V·∫Ω m≈©i t√™n ponder v·ªõi m√†u m·ªù h∆°n v√† ƒë∆∞·ªùng ƒë·ª©t n√©t
            # ƒê∆∞·ªùng ƒë·ª©t n√©t, m·ªèng h∆°n
            painter.setPen(QPen(ponder_color, 3, Qt.DashLine))
            painter.setBrush(QBrush(ponder_color))

            # T√≠nh to√°n vector v√† ƒë·ªô d√†i
            import math
            dx = to_x - from_x
            dy = to_y - from_y
            length = math.sqrt(dx*dx + dy*dy)

            if length > 0:
                # Normalize vector
                dx_norm = dx / length
                dy_norm = dy / length

                # K√≠ch th∆∞·ªõc ƒë·∫ßu m≈©i t√™n nh·ªè h∆°n cho ponder
                arrow_length = 12  # Nh·ªè h∆°n bestmove
                arrow_width = 6   # Nh·ªè h∆°n bestmove

                start_x = from_x + dx_norm * 8  # Offset nhi·ªÅu h∆°n ƒë·ªÉ tr√°nh overlap
                start_y = from_y + dy_norm * 8
                end_x = to_x - dx_norm * 8
                end_y = to_y - dy_norm * 8

                # V·∫Ω th√¢n m≈©i t√™n v·ªõi ƒë∆∞·ªùng ƒë·ª©t n√©t
                painter.drawLine(int(start_x), int(
                    start_y), int(end_x), int(end_y))

                # T√≠nh ƒëi·ªÉm ƒë·∫ßu m≈©i t√™n
                arrow_tip_x = end_x
                arrow_tip_y = end_y

                # T√≠nh 2 ƒëi·ªÉm c√°nh m≈©i t√™n
                base_x = end_x - arrow_length * dx_norm
                base_y = end_y - arrow_length * dy_norm

                # Vector vu√¥ng g√≥c
                perp_x = -dy_norm * arrow_width
                perp_y = dx_norm * arrow_width

                wing1_x = base_x + perp_x
                wing1_y = base_y + perp_y
                wing2_x = base_x - perp_x
                wing2_y = base_y - perp_y

                # V·∫Ω ƒë·∫ßu m≈©i t√™n (tam gi√°c) v·ªõi solid line
                painter.setPen(QPen(ponder_color, 2))  # Solid cho triangle
                from PyQt5.QtGui import QPolygonF
                from PyQt5.QtCore import QPointF

                arrow_head = QPolygonF([
                    QPointF(arrow_tip_x, arrow_tip_y),
                    QPointF(wing1_x, wing1_y),
                    QPointF(wing2_x, wing2_y)
                ])

                painter.drawPolygon(arrow_head)

                # V·∫Ω square nh·ªè ·ªü ƒëi·ªÉm b·∫Øt ƒë·∫ßu ƒë·ªÉ ph√¢n bi·ªát v·ªõi circle c·ªßa bestmove
                square_size = 8
                painter.setPen(QPen(ponder_color, 2))
                painter.drawRect(int(start_x - square_size/2), int(start_y - square_size/2),
                                 square_size, square_size)
