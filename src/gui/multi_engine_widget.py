"""
Widget hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ nhi·ªÅu engine
"""

from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel,
                             QTableWidget, QTableWidgetItem, QPushButton,
                             QCheckBox, QSpinBox, QComboBox, QGroupBox,
                             QHeaderView, QFrame, QSplitter, QFileDialog, QTextEdit,
                             QLineEdit, QMessageBox)
from PyQt5.QtCore import Qt, pyqtSignal, QTimer
from PyQt5.QtGui import QFont, QColor, QPalette
from typing import Dict, List
import os

from ..engine.multi_engine_manager import MultiEngineManager
from ..utils.constants import format_move_chinese_style


class MultiEngineWidget(QWidget):
    """Widget hi·ªÉn th·ªã ph√¢n t√≠ch t·ª´ nhi·ªÅu engine c√πng l√∫c"""

    # Signals
    hint_selected = pyqtSignal(str, str)  # (engine_name, move)
    # {engine_name: [(from, to, color)]}
    engine_arrows_changed = pyqtSignal(dict)
    # {engine_name: {'bestmove': str, 'ponder': str, 'evaluation': float, 'depth': int}}
    analysis_info_changed = pyqtSignal(dict)

    def __init__(self, parent=None):
        super().__init__(parent)
        self.multi_engine_manager = MultiEngineManager()

        # Connect signals
        self.multi_engine_manager.engine_result_updated.connect(
            self._on_engine_result_updated)

        self.available_engines = []  # Danh s√°ch engine c√≥ s·∫µn
        self.current_fen = None
        self.current_moves = []
        self.current_player = 'red'  # L∆∞·ª£t hi·ªán t·∫°i ('red' ho·∫∑c 'black')
        self.is_analysis_running = False

        # UI Update timer - gi·∫£m t·∫ßn su·∫•t ƒë·ªÉ tr√°nh lag
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self._update_display)
        self.update_timer.setInterval(2000)  # Update m·ªói 2 gi√¢y ƒë·ªÉ gi·∫£m t·∫£i

        # Arrow update throttling
        self.arrow_update_timer = QTimer()
        self.arrow_update_timer.timeout.connect(self._update_arrows)
        self.arrow_update_timer.setSingleShot(True)  # Ch·ªâ ch·∫°y m·ªôt l·∫ßn

        self._setup_ui()
        self._setup_connections()

    def _setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán"""
        layout = QVBoxLayout(self)

        # Control panel
        control_group = QGroupBox("ƒêi·ªÅu Khi·ªÉn Nhi·ªÅu Engine")
        control_layout = QVBoxLayout(control_group)

        # Engine selection
        engine_layout = QVBoxLayout()

        # Engine path input
        path_layout = QHBoxLayout()
        path_layout.addWidget(QLabel("ƒê∆∞·ªùng d·∫´n Engine:"))

        self.engine_path_edit = QLineEdit()
        self.engine_path_edit.setPlaceholderText(
            "Ch·ªçn file engine executable...")
        self.engine_path_edit.setReadOnly(True)
        path_layout.addWidget(self.engine_path_edit)

        self.browse_engine_btn = QPushButton("üìÅ Browse")
        self.browse_engine_btn.clicked.connect(self._browse_engine_file)
        path_layout.addWidget(self.browse_engine_btn)

        engine_layout.addLayout(path_layout)

        # Engine name input
        name_layout = QHBoxLayout()
        name_layout.addWidget(QLabel("T√™n Engine:"))

        self.engine_name_edit = QLineEdit()
        self.engine_name_edit.setPlaceholderText("Nh·∫≠p t√™n cho engine...")
        name_layout.addWidget(self.engine_name_edit)

        engine_layout.addLayout(name_layout)

        # Control buttons
        button_layout = QHBoxLayout()

        self.add_engine_btn = QPushButton("‚ûï Th√™m Engine")
        self.add_engine_btn.clicked.connect(self._add_engine_from_path)
        # Disabled until path is selected
        self.add_engine_btn.setEnabled(False)
        button_layout.addWidget(self.add_engine_btn)

        self.remove_engine_btn = QPushButton("‚ùå X√≥a Engine")
        self.remove_engine_btn.clicked.connect(self._remove_selected_engine)
        button_layout.addWidget(self.remove_engine_btn)

        button_layout.addStretch()
        engine_layout.addLayout(button_layout)

        control_layout.addLayout(engine_layout)

        # Analysis controls
        analysis_layout = QHBoxLayout()

        self.toggle_analysis_btn = QPushButton("üîç B·∫Øt ƒê·∫ßu Ph√¢n T√≠ch")
        self.toggle_analysis_btn.clicked.connect(self._toggle_analysis)
        analysis_layout.addWidget(self.toggle_analysis_btn)

        analysis_layout.addWidget(QLabel("Depth:"))
        self.depth_spin = QSpinBox()
        self.depth_spin.setRange(1, 20)
        self.depth_spin.setValue(8)
        analysis_layout.addWidget(self.depth_spin)

        self.get_hints_btn = QPushButton("L·∫•y G·ª£i √ù")
        self.get_hints_btn.clicked.connect(self._get_hints)
        analysis_layout.addWidget(self.get_hints_btn)

        analysis_layout.addStretch()
        control_layout.addLayout(analysis_layout)

        layout.addWidget(control_group)

        # Results table
        results_group = QGroupBox("K·∫øt Qu·∫£ Ph√¢n T√≠ch")
        results_layout = QVBoxLayout(results_group)

        self.results_table = QTableWidget()
        self.results_table.setColumnCount(8)
        self.results_table.setHorizontalHeaderLabels([
            "Engine", "Protocol", "ƒê√°nh Gi√°", "ƒê·ªô S√¢u", "N∆∞·ªõc ƒêi T·ªët", "Nodes", "PV", "Tr·∫°ng Th√°i"
        ])

        # Resize columns
        header = self.results_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Fixed)  # Engine name
        header.setSectionResizeMode(1, QHeaderView.Fixed)  # Protocol
        header.setSectionResizeMode(2, QHeaderView.Fixed)  # Evaluation
        header.setSectionResizeMode(3, QHeaderView.Fixed)  # Depth
        header.setSectionResizeMode(4, QHeaderView.Fixed)  # Best move
        header.setSectionResizeMode(5, QHeaderView.Fixed)  # Nodes
        header.setSectionResizeMode(6, QHeaderView.Stretch)  # PV
        header.setSectionResizeMode(7, QHeaderView.Fixed)  # Status

        self.results_table.setColumnWidth(0, 100)
        self.results_table.setColumnWidth(1, 60)   # Protocol
        self.results_table.setColumnWidth(2, 80)   # Evaluation
        self.results_table.setColumnWidth(3, 60)   # Depth
        self.results_table.setColumnWidth(4, 80)   # Best move
        self.results_table.setColumnWidth(5, 80)   # Nodes
        self.results_table.setColumnWidth(7, 80)   # Status

        # Double click to select move
        self.results_table.cellDoubleClicked.connect(
            self._on_cell_double_clicked)

        results_layout.addWidget(self.results_table)
        layout.addWidget(results_group)

        # Arrow display options
        arrow_group = QGroupBox("Hi·ªÉn Th·ªã M≈©i T√™n")
        arrow_layout = QHBoxLayout(arrow_group)

        self.show_arrows_cb = QCheckBox("Hi·ªÉn th·ªã m≈©i t√™n tr√™n b√†n c·ªù")
        self.show_arrows_cb.setChecked(True)
        self.show_arrows_cb.stateChanged.connect(self._update_arrows)
        arrow_layout.addWidget(self.show_arrows_cb)

        arrow_layout.addStretch()
        layout.addWidget(arrow_group)

        # Engine Log section
        log_group = QGroupBox("üìã Engine Logs")
        log_layout = QVBoxLayout(log_group)

        self.engine_log = QTextEdit()
        self.engine_log.setPlaceholderText(
            "Logs c·ªßa c√°c engines s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y...")
        self.engine_log.setFont(QFont("Consolas", 9))  # Font monospace
        self.engine_log.setMaximumHeight(150)  # Gi·ªõi h·∫°n chi·ªÅu cao
        self.engine_log.setReadOnly(True)
        log_layout.addWidget(self.engine_log)

        # Clear log button
        clear_log_btn = QPushButton("üóëÔ∏è Clear Logs")
        clear_log_btn.clicked.connect(self._clear_logs)
        log_layout.addWidget(clear_log_btn)

        layout.addWidget(log_group)

    def _setup_connections(self):
        """Thi·∫øt l·∫≠p connections cho UI"""
        # Enable/disable add button khi c√≥ path v√† name
        self.engine_path_edit.textChanged.connect(self._check_add_button_state)
        self.engine_name_edit.textChanged.connect(self._check_add_button_state)

    def _check_add_button_state(self):
        """Ki·ªÉm tra v√† enable/disable n√∫t Add Engine"""
        has_path = bool(self.engine_path_edit.text().strip())
        has_name = bool(self.engine_name_edit.text().strip())
        self.add_engine_btn.setEnabled(has_path and has_name)

    def _browse_engine_file(self):
        """Browse ƒë·ªÉ ch·ªçn file engine"""
        file_dialog = QFileDialog(self)
        file_dialog.setWindowTitle("Ch·ªçn Engine Executable")
        file_dialog.setFileMode(QFileDialog.ExistingFile)

        # Filter cho executable files
        if os.name == 'nt':  # Windows
            file_dialog.setNameFilter(
                "Executable files (*.exe);;All files (*.*)")
        else:  # Linux/Mac
            file_dialog.setNameFilter("All files (*)")

        if file_dialog.exec_() == QFileDialog.Accepted:
            selected_files = file_dialog.selectedFiles()
            if selected_files:
                engine_path = selected_files[0]
                self.engine_path_edit.setText(engine_path)

                # Auto-generate engine name t·ª´ filename
                engine_filename = os.path.basename(engine_path)
                engine_name = os.path.splitext(engine_filename)[0]

                # Capitalize first letter
                engine_name = engine_name.replace(
                    '-', ' ').replace('_', ' ').title()

                if not self.engine_name_edit.text().strip():
                    self.engine_name_edit.setText(engine_name)

                print(f"üìÅ ƒê√£ ch·ªçn engine: {engine_path}")

    def _add_engine_from_path(self):
        """Th√™m engine t·ª´ path ƒë√£ ch·ªçn"""
        engine_path = self.engine_path_edit.text().strip()
        engine_name = self.engine_name_edit.text().strip()

        if not engine_path:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng ch·ªçn file engine!")
            return

        if not engine_name:
            # Auto generate name from filename
            engine_name = os.path.splitext(os.path.basename(engine_path))[0]
            self.engine_name_edit.setText(engine_name)

        if not os.path.exists(engine_path):
            QMessageBox.warning(
                self, "L·ªói", f"File engine kh√¥ng t·ªìn t·∫°i:\n{engine_path}")
            return

        success = self.multi_engine_manager.add_engine(
            engine_name, engine_path)
        if success:
            self._log_message(f"‚úÖ ƒê√£ th√™m engine: {engine_name}")
            QMessageBox.information(
                self, "Th√†nh c√¥ng", f"‚úÖ ƒê√£ th√™m engine: {engine_name}")

            # Clear inputs
            self.engine_path_edit.clear()
            self.engine_name_edit.clear()
        else:
            self._log_message(f"‚ùå Kh√¥ng th·ªÉ th√™m engine: {engine_name}")
            QMessageBox.warning(
                self, "L·ªói", f"‚ùå Kh√¥ng th·ªÉ th√™m engine: {engine_name}")

    def _add_engine_from_path_direct(self, name: str, path: str):
        """Th√™m engine tr·ª±c ti·∫øp (d√πng cho test)"""
        success = self.multi_engine_manager.add_engine(name, path)
        if success:
            self._log_message(f"‚úÖ ƒê√£ th√™m engine: {name}")
            print(f"‚úÖ Added engine: {name}")
        else:
            self._log_message(f"‚ùå Kh√¥ng th·ªÉ th√™m engine: {name}")
            print(f"‚ùå Failed to add engine: {name}")

    def _remove_selected_engine(self):
        """X√≥a engine ƒë∆∞·ª£c ch·ªçn t·ª´ table"""
        current_row = self.results_table.currentRow()
        if current_row < 0:
            return

        engine_name_item = self.results_table.item(current_row, 0)
        if engine_name_item:
            engine_name = engine_name_item.text()
            self._log_message(f"üóëÔ∏è ƒêang x√≥a engine: {engine_name}")
            self.multi_engine_manager.remove_engine(engine_name)
            self._update_results_table()
            self._log_message(f"‚úÖ ƒê√£ x√≥a engine: {engine_name}")

    def _toggle_analysis(self):
        """Toggle analysis state"""
        print(f"üîÑ Toggle analysis - current state: {self.is_analysis_running}")
        if self.is_analysis_running:
            self._stop_analysis()
        else:
            self._start_analysis()
        print(f"üîÑ Toggle analysis - new state: {self.is_analysis_running}")

    def _start_analysis(self):
        """B·∫Øt ƒë·∫ßu ph√¢n t√≠ch li√™n t·ª•c - LU√îN l·∫•y FEN hi·ªán t·∫°i"""
        active_engines = self.multi_engine_manager.get_active_engines()
        if not active_engines:
            QMessageBox.warning(
                self, "L·ªói", "‚ùå Ch∆∞a c√≥ engine n√†o ƒë∆∞·ª£c th√™m!\nVui l√≤ng th√™m engine tr∆∞·ªõc khi ph√¢n t√≠ch.")
            return

        # LU√îN L·∫§Y FEN HI·ªÜN T·∫†I t·ª´ main window - KH√îNG d√πng cache c≈©
        print("üîÑ [MULTI-ENGINE] FORCE l·∫•y FEN hi·ªán t·∫°i t·ª´ main window...")
        current_fen, current_moves = self.get_current_position_from_main_window()

        if not current_fen:
            QMessageBox.warning(
                self, "L·ªói", "‚ùå Kh√¥ng th·ªÉ l·∫•y FEN hi·ªán t·∫°i t·ª´ main window!\nVui l√≤ng ki·ªÉm tra l·∫°i v·ªã tr√≠ b√†n c·ªù.")
            return

        # FORCE UPDATE current position - clear cache c≈©
        print(f"üîÑ [MULTI-ENGINE] CLEARING old cache...")
        print(
            f"üîÑ [MULTI-ENGINE] Old FEN: {getattr(self, 'current_fen', 'None')}")
        print(f"üîÑ [MULTI-ENGINE] New FEN: {current_fen}")

        self.current_fen = current_fen
        self.current_moves = current_moves or []

        print(
            f"üîç B·∫Øt ƒë·∫ßu ph√¢n t√≠ch li√™n t·ª•c v·ªõi {len(active_engines)} engines")
        print(f"üìç [MULTI-ENGINE] FEN TH·∫¨T S·ª∞ HI·ªÜN T·∫†I: {current_fen}")
        print(f"üìù [MULTI-ENGINE] Moves HI·ªÜN T·∫†I: {current_moves}")

        # FORCE set position m·ªõi cho t·∫•t c·∫£ engines
        print("üîÑ [MULTI-ENGINE] FORCE setting new position to all engines...")
        self.multi_engine_manager.set_position_all(current_fen, current_moves)

        # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ engines x·ª≠ l√Ω position
        import time
        time.sleep(0.1)

        # B·∫Øt ƒë·∫ßu infinite analysis V·ªöI FEN HI·ªÜN T·∫†I
        print("üîÑ [MULTI-ENGINE] Starting infinite analysis WITH CURRENT FEN...")
        self.multi_engine_manager.start_analysis_all(
            current_fen, current_moves)

        self.is_analysis_running = True
        self.toggle_analysis_btn.setText("‚èπÔ∏è D·ª´ng Ph√¢n T√≠ch")

        # Start update timer
        self.update_timer.start()

        print("‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch li√™n t·ª•c v·ªõi FEN TH·∫¨T S·ª∞ HI·ªÜN T·∫†I")
        self._log_message(
            f"üîç B·∫Øt ƒë·∫ßu ph√¢n t√≠ch v·ªõi FEN: {current_fen[:30]}...")

    def _stop_analysis(self):
        """D·ª´ng ph√¢n t√≠ch li√™n t·ª•c - TH·∫¨T S·ª∞ TERMINATE ENGINES"""
        print("‚èπÔ∏è FORCE stopping ph√¢n t√≠ch li√™n t·ª•c...")

        # Log danh s√°ch engines s·∫Ω d·ª´ng
        active_engines = self.multi_engine_manager.get_active_engines()
        print(f"üõë Stopping {len(active_engines)} engines: {active_engines}")

        # TH·∫¨T S·ª∞ FORCE STOP - terminate engine processes
        print("üõë [MULTI-ENGINE] TH·∫¨T S·ª∞ TERMINATE engine processes...")
        with self.multi_engine_manager.worker_lock:
            for worker in self.multi_engine_manager.workers.values():
                if worker.engine:
                    print(
                        f"üõë [MULTI-ENGINE] Force terminating {worker.engine_name}...")
                    worker.engine.force_stop_analysis()

                    # Set worker status to stopped
                    with worker.result_lock:
                        worker.last_result['status'] = 'stopped'
                        worker.last_result['ignore_old_info'] = True

        # Stop analysis all (backup)
        self.multi_engine_manager.stop_analysis_all()

        # Update UI state
        self.is_analysis_running = False
        self.toggle_analysis_btn.setText("‚ñ∂Ô∏è B·∫Øt ƒê·∫ßu Ph√¢n T√≠ch")

        # Stop update timer
        self.update_timer.stop()

        # Clear results to show stopped state
        self._clear_all_results()

        # Force update UI ngay l·∫≠p t·ª©c ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i "stopped"
        self._update_display()

        # Log message to engine log
        self._log_message(
            "üõë ƒê√É TERMINATE T·∫§T C·∫¢ ENGINE PROCESSES - Engines ƒë√£ d·ª´ng ho√†n to√†n!")

        print("‚úÖ ƒê√É TERMINATE engine processes - kh√¥ng c√≤n output n√†o n·ªØa!")

    def _get_hints(self):
        """L·∫•y g·ª£i √Ω t·ª´ t·∫•t c·∫£ engine"""
        print(f"üîç DEBUG _get_hints: current_fen = {self.current_fen}")
        print(f"üîç DEBUG _get_hints: current_moves = {self.current_moves}")

        active_engines = self.multi_engine_manager.get_active_engines()
        if not active_engines:
            QMessageBox.warning(
                self, "L·ªói", "‚ùå Ch∆∞a c√≥ engine n√†o ƒë∆∞·ª£c th√™m!\nVui l√≤ng th√™m engine tr∆∞·ªõc khi l·∫•y g·ª£i √Ω.")
            print("‚ùå Ch∆∞a c√≥ engine n√†o ƒë∆∞·ª£c th√™m")
            return

        if not self.current_fen:
            # Th·ª≠ l·∫•y FEN t·ª´ main window
            print("‚ö†Ô∏è current_fen is None, trying to get from main window...")
            current_fen, current_moves = self.get_current_position_from_main_window()

            if current_fen:
                self.set_position(current_fen, current_moves)

            if not self.current_fen:
                QMessageBox.warning(
                    self, "L·ªói", "‚ùå Ch∆∞a c√≥ v·ªã tr√≠ b√†n c·ªù!\nVui l√≤ng ƒë·∫∑t v·ªã tr√≠ b√†n c·ªù tr∆∞·ªõc.")
                print("‚ùå Ch∆∞a c√≥ v·ªã tr√≠ b√†n c·ªù")
                return

        depth = self.depth_spin.value()
        print(
            f"ü§ñ Y√™u c·∫ßu g·ª£i √Ω (depth {depth}) t·ª´ {len(active_engines)} engines")
        print(f"üìã Engines: {active_engines}")
        print(f"üéØ Position: {self.current_fen}")
        print(f"üìù Moves: {self.current_moves}")

        self.multi_engine_manager.set_position_all(
            self.current_fen, self.current_moves)
        self.multi_engine_manager.get_hint_all(depth)
        print(f"‚úÖ ƒê√£ g·ª≠i y√™u c·∫ßu g·ª£i √Ω (depth {depth}) ƒë·∫øn t·∫•t c·∫£ engine")

    def _update_display(self):
        """Update hi·ªÉn th·ªã k·∫øt qu·∫£"""
        self._update_results_table()
        self._update_arrows()
        self._update_analysis_info()

    def _update_results_table(self):
        """Update b·∫£ng k·∫øt qu·∫£"""
        active_engines = self.multi_engine_manager.get_active_engines()
        results = self.multi_engine_manager.get_results()

        self.results_table.setRowCount(len(active_engines))

        for row, engine_name in enumerate(active_engines):
            result = results.get(engine_name, {})

            # Engine name
            self.results_table.setItem(row, 0, QTableWidgetItem(engine_name))

            # Protocol
            protocol = result.get('protocol', 'unknown')
            protocol_item = QTableWidgetItem(protocol.upper())
            if protocol == "ucci":
                protocol_item.setToolTip("UCCI - Xiangqi protocol")
            elif protocol == "uci":
                protocol_item.setToolTip("UCI - Chess protocol")
            self.results_table.setItem(row, 1, protocol_item)

            # Evaluation
            eval_score = result.get('evaluation', 0.0)
            if eval_score == float('inf'):
                eval_text = "Chi·∫øn th·∫Øng"
            elif eval_score == float('-inf'):
                eval_text = "Thua"
            else:
                eval_text = f"{eval_score:+.2f}"
            self.results_table.setItem(row, 2, QTableWidgetItem(eval_text))

            # Depth
            depth = result.get('depth', 0)
            self.results_table.setItem(row, 3, QTableWidgetItem(str(depth)))

            # Best move
            bestmove = result.get('bestmove', '-')
            ponder = result.get('ponder', '')

            # Hi·ªÉn th·ªã c·∫£ bestmove v√† ponder
            if bestmove != '-' and ponder:
                move_text = f"{bestmove} (ponder: {ponder})"
            else:
                move_text = bestmove

            self.results_table.setItem(row, 4, QTableWidgetItem(move_text))

            # Nodes
            nodes = result.get('nodes', 0)
            nodes_text = f"{nodes:,}" if nodes > 0 else "-"
            self.results_table.setItem(row, 5, QTableWidgetItem(nodes_text))

            # Principal Variation
            pv = result.get('pv', [])
            pv_text = " ".join(pv[:5]) if pv else "-"  # Hi·ªÉn th·ªã 5 n∆∞·ªõc ƒë·∫ßu
            self.results_table.setItem(row, 6, QTableWidgetItem(pv_text))

            # Status - hi·ªÉn th·ªã status th·ª±c t·∫ø t·ª´ engine
            engine_status = result.get('status', 'unknown')
            if engine_status == 'stopped':
                status = "‚èπÔ∏è ƒê√£ d·ª´ng"
            elif engine_status == 'analyzing':
                status = "üîç ƒêang ph√¢n t√≠ch"
            elif engine_status == 'ready':
                status = "‚úÖ S·∫µn s√†ng"
            elif engine_status == 'thinking':
                status = "ü§î ƒêang suy nghƒ©"
            else:
                status = "‚ùì Kh√¥ng r√µ"
            self.results_table.setItem(row, 7, QTableWidgetItem(status))

    def _update_arrows(self):
        """Update m≈©i t√™n tr√™n b√†n c·ªù v·ªõi m√†u v√† style kh√°c nhau"""
        if not self.show_arrows_cb.isChecked():
            self.engine_arrows_changed.emit({})
            return

        arrows_data = {}
        results = self.multi_engine_manager.get_results()

        if not results:
            return

        # M√†u s·∫Øc c·ªë ƒë·ªãnh cho t·ª´ng engine (gi·ªØ nguy√™n m√†u)
        base_colors = ['cyan', 'blue', 'green', 'orange',
                       'purple', 'brown', 'red', 'magenta']

        for i, (engine_name, result) in enumerate(results.items()):
            engine_arrows = []

            # M√†u c∆° b·∫£n cho engine n√†y
            base_color = base_colors[i % len(base_colors)]

            # Bestmove (l∆∞·ª£t hi·ªán t·∫°i) - n√©t li·ªÅn
            bestmove = result.get('bestmove')
            if bestmove and len(bestmove) >= 4:
                from_pos = bestmove[:2]
                to_pos = bestmove[2:4]

                engine_arrows.append({
                    'from': from_pos,
                    'to': to_pos,
                    'color': base_color,
                    'style': 'solid',
                    'opacity': 1.0,
                    'is_current_turn': True
                })

            # Ponder (l∆∞·ª£t ƒë·ªëi ph∆∞∆°ng) - n√©t ƒë·ª©t
            ponder = result.get('ponder')
            if ponder and len(ponder) >= 4:
                from_pos = ponder[:2]
                to_pos = ponder[2:4]

                engine_arrows.append({
                    'from': from_pos,
                    'to': to_pos,
                    'color': base_color,
                    'style': 'dashed',
                    'opacity': 0.8,
                    'is_current_turn': False
                })

            if engine_arrows:
                arrows_data[engine_name] = engine_arrows

        if arrows_data:
            print(f"üèπ Updating arrows for {len(arrows_data)} engines")
            self.engine_arrows_changed.emit(arrows_data)

    def _update_analysis_info(self):
        """Update th√¥ng tin ph√¢n t√≠ch cho board widget"""
        results = self.multi_engine_manager.get_results()

        if not results:
            self.analysis_info_changed.emit({})
            return

        analysis_info = {}

        for engine_name, result in results.items():
            bestmove = result.get('bestmove', '')
            ponder = result.get('ponder', '')
            evaluation = result.get('evaluation', 0.0)
            depth = result.get('depth', 0)

            # Ch·ªâ g·ª≠i info n·∫øu c√≥ bestmove h·ª£p l·ªá
            if bestmove and bestmove != 'none' and bestmove != '-':
                analysis_info[engine_name] = {
                    'bestmove': bestmove,
                    'ponder': ponder,
                    'evaluation': evaluation,
                    'depth': depth
                }

        if analysis_info:
            self.analysis_info_changed.emit(analysis_info)

    def _update_arrows_immediate(self):
        """Update arrows v·ªõi throttling ƒë·ªÉ tr√°nh update qu√° th∆∞·ªùng xuy√™n"""
        if self.show_arrows_cb.isChecked():
            # Restart timer ƒë·ªÉ delay update (throttling)
            self.arrow_update_timer.stop()
            self.arrow_update_timer.start(200)  # Delay 200ms

    def _get_move_player(self, move: str) -> str:
        """
        X√°c ƒë·ªãnh phe c·ªßa n∆∞·ªõc ƒëi d·ª±a tr√™n v·ªã tr√≠ from

        Args:
            move: N∆∞·ªõc ƒëi d·∫°ng "e0e1"

        Returns:
            str: 'red' ho·∫∑c 'black'
        """
        if not move or len(move) < 2:
            return self.current_player

        from_pos = move[:2]
        try:
            from_row = int(from_pos[1])

            # Qu√¢n ƒë·ªè th∆∞·ªùng ·ªü h√†ng 0-4, qu√¢n ƒëen ·ªü h√†ng 5-9
            # Nh∆∞ng t·ªët c√≥ th·ªÉ qua s√¥ng n√™n c·∫ßn check c·∫©n th·∫≠n h∆°n
            if from_row <= 4:
                return 'red'
            else:
                return 'black'

        except (ValueError, IndexError):
            # Fallback v·ªÅ current player n·∫øu kh√¥ng parse ƒë∆∞·ª£c
            return self.current_player

    def _on_cell_double_clicked(self, row: int, column: int):
        """X·ª≠ l√Ω double click v√†o cell"""
        if column == 4:  # Best move column (ƒë√£ shift v√¨ th√™m protocol column)
            engine_name_item = self.results_table.item(row, 0)
            bestmove_item = self.results_table.item(row, 4)

            if engine_name_item and bestmove_item:
                engine_name = engine_name_item.text()
                bestmove = bestmove_item.text()

                if bestmove != '-':
                    self.hint_selected.emit(engine_name, bestmove)
                    print(f"üéØ Ch·ªçn g·ª£i √Ω t·ª´ {engine_name}: {bestmove}")

    def _clear_logs(self):
        """Clear engine logs"""
        self.engine_log.clear()
        print("üóëÔ∏è Cleared engine logs")

    def _clear_all_results(self):
        """Clear t·∫•t c·∫£ results UI v√† arrows - hi·ªÉn th·ªã tr·∫°ng th√°i STOPPED"""
        try:
            print("üßπ [MULTI-ENGINE] Clearing all UI results and arrows...")

            # Clear arrows ngay l·∫≠p t·ª©c
            if hasattr(self, 'engine_arrows'):
                self.engine_arrows.clear()
                self.engine_arrows_changed.emit({})  # Emit empty arrows
            else:
                # Emit empty arrows n·∫øu ch∆∞a c√≥ engine_arrows
                self.engine_arrows_changed.emit({})

            # Clear results table v√† hi·ªÉn th·ªã tr·∫°ng th√°i "STOPPED"
            active_engines = self.multi_engine_manager.get_active_engines()
            self.results_table.setRowCount(len(active_engines))

            for row, engine_name in enumerate(active_engines):
                # Engine name
                self.results_table.setItem(
                    row, 0, QTableWidgetItem(engine_name))

                # Protocol (gi·ªØ nguy√™n n·∫øu c√≥)
                self.results_table.setItem(row, 1, QTableWidgetItem("UCCI"))

                # Evaluation = STOPPED
                stopped_item = QTableWidgetItem("üõë STOPPED")
                stopped_item.setToolTip("Engine ƒë√£ d·ª´ng ph√¢n t√≠ch")
                self.results_table.setItem(row, 2, stopped_item)

                # Depth = 0
                self.results_table.setItem(row, 3, QTableWidgetItem("0"))

                # Best move = STOPPED
                self.results_table.setItem(
                    row, 4, QTableWidgetItem("üõë STOPPED"))

                # Nodes = 0
                self.results_table.setItem(row, 5, QTableWidgetItem("0"))

            print("‚úÖ [MULTI-ENGINE] Results table updated with STOPPED status")

            # Log message
            self._log_message(
                "üõë T·∫§T C·∫¢ ENGINES ƒê√É D·ª™NG - UI cleared v√† hi·ªÉn th·ªã tr·∫°ng th√°i STOPPED")

            print(
                "‚úÖ [MULTI-ENGINE] All UI results cleared and STOPPED status displayed")

        except Exception as e:
            print(f"‚ùå [MULTI-ENGINE] Error clearing UI results: {e}")

    def save_current_engines(self):
        """L∆∞u l·∫°i th√¥ng tin engines hi·ªán t·∫°i"""
        try:
            self.saved_engines = []

            with self.multi_engine_manager.worker_lock:
                for name, worker in self.multi_engine_manager.workers.items():
                    engine_info = {
                        'name': name,
                        'path': worker.engine_path if hasattr(worker, 'engine_path') else None
                    }
                    self.saved_engines.append(engine_info)
                    print(
                        f"üíæ [MULTI-ENGINE] Saved engine: {name} -> {engine_info['path']}")

            print(f"üíæ [MULTI-ENGINE] Saved {len(self.saved_engines)} engines")
            self._log_message(f"üíæ Saved {len(self.saved_engines)} engines")

        except Exception as e:
            print(f"‚ùå [MULTI-ENGINE] Error saving engines: {e}")
            self.saved_engines = []

    def restore_saved_engines(self):
        """Restore l·∫°i engines ƒë√£ l∆∞u"""
        try:
            if not hasattr(self, 'saved_engines') or not self.saved_engines:
                print("‚ö†Ô∏è [MULTI-ENGINE] No saved engines to restore")
                self._add_default_engines()  # Fallback
                return

            print(
                f"üîß [MULTI-ENGINE] Restoring {len(self.saved_engines)} saved engines...")

            restored_count = 0
            for engine_info in self.saved_engines:
                name = engine_info.get('name')
                path = engine_info.get('path')

                if name and path:
                    if self.multi_engine_manager.add_engine(name, path):
                        print(f"‚úÖ [MULTI-ENGINE] Restored engine: {name}")
                        self._log_message(f"‚úÖ Restored engine: {name}")
                        restored_count += 1
                    else:
                        print(
                            f"‚ùå [MULTI-ENGINE] Failed to restore engine: {name}")
                        self._log_message(
                            f"‚ùå Failed to restore engine: {name}")
                else:
                    print(
                        f"‚ö†Ô∏è [MULTI-ENGINE] Invalid engine info: {engine_info}")

            # UI s·∫Ω t·ª± ƒë·ªông update khi engines ƒë∆∞·ª£c add

            print(
                f"‚úÖ [MULTI-ENGINE] Restored {restored_count}/{len(self.saved_engines)} engines")
            self._log_message(
                f"‚úÖ Restored {restored_count}/{len(self.saved_engines)} engines")

        except Exception as e:
            print(f"‚ùå [MULTI-ENGINE] Error restoring engines: {e}")
            self._log_message(f"‚ùå Error restoring engines: {e}")
            # Fallback to default engines
            self._add_default_engines()

    def _add_default_engines(self):
        """Add l·∫°i default engines sau khi clear (fallback method)"""
        try:
            print("üîß [MULTI-ENGINE] Adding default engines...")

            # Add Pikafish engine
            pikafish_path = "./engines/Pikafish/pikafish"
            if self.multi_engine_manager.add_engine("Pikafish", pikafish_path):
                print("‚úÖ [MULTI-ENGINE] Added Pikafish engine")
                self._log_message("‚úÖ Added Pikafish engine")
            else:
                print("‚ùå [MULTI-ENGINE] Failed to add Pikafish engine")
                self._log_message("‚ùå Failed to add Pikafish engine")

            # Add Fairy-Stockfish engine if exists
            fairy_path = "./engines/Fairy-Stockfish/fairy-stockfish"
            import os
            if os.path.exists(fairy_path):
                if self.multi_engine_manager.add_engine("Fairy-Stockfish", fairy_path):
                    print("‚úÖ [MULTI-ENGINE] Added Fairy-Stockfish engine")
                    self._log_message("‚úÖ Added Fairy-Stockfish engine")
                else:
                    print("‚ùå [MULTI-ENGINE] Failed to add Fairy-Stockfish engine")
                    self._log_message("‚ùå Failed to add Fairy-Stockfish engine")

            # UI s·∫Ω t·ª± ƒë·ªông update khi engines ƒë∆∞·ª£c add

            print("‚úÖ [MULTI-ENGINE] Default engines added")

        except Exception as e:
            print(f"‚ùå [MULTI-ENGINE] Error adding default engines: {e}")
            self._log_message(f"‚ùå Error adding default engines: {e}")

    def _log_message(self, message: str):
        """Th√™m message v√†o engine log"""
        from datetime import datetime
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"

        self.engine_log.append(formatted_message)

        # Auto scroll to bottom
        scrollbar = self.engine_log.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())

    def closeEvent(self, event):
        """Cleanup khi ƒë√≥ng widget"""
        self._stop_analysis()
        self.multi_engine_manager.stop_all()
        super().closeEvent(event)

    def get_current_position_from_main_window(self):
        """L·∫•y position hi·ªán t·∫°i t·ª´ main window - FORCE l·∫•y FEN th·∫≠t"""
        try:
            # T√¨m main window qua QApplication
            from PyQt5.QtWidgets import QApplication
            app = QApplication.instance()
            if app:
                for widget in app.topLevelWidgets():
                    if hasattr(widget, 'game_state') and hasattr(widget, 'convert_moves_to_engine_notation'):
                        # FORCE l·∫•y FEN hi·ªán t·∫°i th·∫≠t s·ª±
                        current_fen = widget.game_state.to_fen()
                        current_moves = widget.convert_moves_to_engine_notation(
                            widget.game_state.move_history)

                        print(f"üîÑ [GET_POSITION] TH·∫¨T S·ª∞ l·∫•y t·ª´ main window:")
                        print(f"üîÑ [GET_POSITION] Current FEN: {current_fen}")
                        print(
                            f"üîÑ [GET_POSITION] Move count: {len(current_moves)}")
                        print(f"üîÑ [GET_POSITION] Moves: {current_moves}")
                        print(
                            f"üîÑ [GET_POSITION] Game state player: {getattr(widget.game_state, 'current_player', 'unknown')}")

                        # Validation
                        if not current_fen or current_fen.strip() == "":
                            print("‚ùå [GET_POSITION] FEN is empty!")
                            return None, None

                        if "rnbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/1C5C1/9/RNBAKABNR" in current_fen:
                            print(
                                "‚ö†Ô∏è [GET_POSITION] Detected INITIAL position - this might be wrong!")

                        return current_fen, current_moves

            print("‚ùå [GET_POSITION] Could not find main window with game_state")
            return None, None
        except Exception as e:
            print(f"‚ùå [GET_POSITION] L·ªói khi l·∫•y position t·ª´ main window: {e}")
            import traceback
            traceback.print_exc()
            return None, None

    def set_position(self, fen: str, moves: List[str] = None):
        """ƒê·∫∑t v·ªã tr√≠ cho t·∫•t c·∫£ engine"""
        self.current_fen = fen
        self.current_moves = moves or []

        # X√°c ƒë·ªãnh l∆∞·ª£t hi·ªán t·∫°i t·ª´ s·ªë n∆∞·ªõc ƒë√£ ƒëi
        move_count = len(self.current_moves)
        self.current_player = 'red' if move_count % 2 == 0 else 'black'

        active_engines = self.multi_engine_manager.get_active_engines()
        print(
            f"üìç Multi-engine position updated: {len(active_engines)} engines, {len(self.current_moves)} moves")

        if active_engines:
            self.multi_engine_manager.set_position_all(fen, moves)
            # Logic restart analysis ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong EngineWorker._process_command
            # Kh√¥ng c·∫ßn restart l·∫°i ·ªü ƒë√¢y ƒë·ªÉ tr√°nh duplicate go infinite commands
        else:
            print("‚ö†Ô∏è [MULTI-ENGINE] Kh√¥ng c√≥ engine n√†o ƒë·ªÉ c·∫≠p nh·∫≠t v·ªã tr√≠")

    def _on_engine_result_updated(self, engine_name: str, result: dict):
        """Slot nh·∫≠n k·∫øt qu·∫£ t·ª´ engine (thread-safe via Qt signals)"""
        bestmove = result.get('bestmove', 'none')
        ponder = result.get('ponder', '')
        evaluation = result.get('evaluation', 0)
        depth = result.get('depth', 0)
        status = result.get('status', 'unknown')

        # Log chi ti·∫øt k·∫øt qu·∫£
        if bestmove and bestmove != 'none':
            log_msg = f"üéØ {engine_name}: {bestmove}"
            if ponder:
                log_msg += f" (ponder: {ponder})"
            log_msg += f" (eval: {evaluation:.2f}, depth: {depth})"
            self._log_message(log_msg)

        # Log status changes
        if status in ['ready', 'failed', 'thinking', 'analyzing']:
            self._log_message(f"üìä {engine_name}: {status}")

        # Update s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ngay l·∫≠p t·ª©c ƒë·ªÉ arrows nhanh h∆°n
        self._update_arrows_immediate()

    def reload_engines_with_new_position(self, fen: str, moves: List[str] = None):
        """Reload engines v·ªõi position m·ªõi - X√ìA TO√ÄN B·ªò ‚Üí LOAD L·∫†I ‚Üí B·∫¨T PH√ÇN T√çCH"""
        try:
            print(f"üîÑ [MULTI-ENGINE] ===== X√ìA & LOAD L·∫†I ENGINES =====")
            print(f"üîÑ [MULTI-ENGINE] New FEN: {fen}")
            print(f"üîÑ [MULTI-ENGINE] New moves: {moves}")

            # 1. L∆ØU L·∫†I danh s√°ch engines hi·ªán t·∫°i
            print("üíæ [MULTI-ENGINE] L∆∞u l·∫°i danh s√°ch engines...")
            self.save_current_engines()

            if not hasattr(self, 'saved_engines') or not self.saved_engines:
                print("‚ö†Ô∏è [MULTI-ENGINE] No engines to reload")
                return

            print(
                f"üíæ [MULTI-ENGINE] ƒê√£ l∆∞u {len(self.saved_engines)} engines: {[e['name'] for e in self.saved_engines]}")

            # 2. X√ìA TO√ÄN B·ªò engines kh·ªèi danh s√°ch
            print("üóëÔ∏è [MULTI-ENGINE] X√ìA TO√ÄN B·ªò engines...")
            self.multi_engine_manager.stop_all()  # Stop v√† clear t·∫•t c·∫£

            # Clear UI
            self._clear_all_results()

            # Stop analysis UI state
            self.is_analysis_running = False
            self.toggle_analysis_btn.setText("‚ñ∂Ô∏è B·∫Øt ƒê·∫ßu Ph√¢n T√≠ch")
            self.update_timer.stop()

            print("‚úÖ [MULTI-ENGINE] ƒê√£ x√≥a to√†n b·ªô engines")

            # 3. ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o cleanup ho√†n t·∫•t
            import time
            time.sleep(0.3)

            # 4. LOAD L·∫†I engines ƒë√£ l∆∞u
            print("üîÑ [MULTI-ENGINE] LOAD L·∫†I engines...")
            self.restore_saved_engines()

            # 5. ƒê·ª£i engines kh·ªüi ƒë·ªông
            time.sleep(0.5)
            print("‚è≥ [MULTI-ENGINE] ƒê·ª£i engines kh·ªüi ƒë·ªông...")

            # 6. SET position m·ªõi cho t·∫•t c·∫£ engines
            print(f"üìç [MULTI-ENGINE] SET position m·ªõi cho engines...")
            self.current_fen = fen
            self.current_moves = moves or []
            self.multi_engine_manager.set_position_all(fen, moves)

            # 7. B·∫¨T L·∫†I ph√¢n t√≠ch v·ªõi position m·ªõi
            print("üöÄ [MULTI-ENGINE] B·∫¨T L·∫†I ph√¢n t√≠ch v·ªõi position m·ªõi...")
            self.multi_engine_manager.start_analysis_all()
            self.is_analysis_running = True

            # 8. Update UI
            self.toggle_analysis_btn.setText("‚èπÔ∏è D·ª´ng Ph√¢n T√≠ch")
            self.update_timer.start()

            active_engines = self.multi_engine_manager.get_active_engines()
            print(
                f"‚úÖ [MULTI-ENGINE] Successfully X√ìA & LOAD L·∫†I {len(active_engines)} engines")
            self._log_message(
                f"üîÑ X√ìA & LOAD L·∫†I {len(active_engines)} engines v·ªõi position m·ªõi")

        except Exception as e:
            print(
                f"‚ùå [MULTI-ENGINE] Error trong qu√° tr√¨nh x√≥a & load l·∫°i: {e}")
            import traceback
            traceback.print_exc()
            self._log_message(f"‚ùå Error x√≥a & load l·∫°i engines: {e}")
