# -*- coding: utf-8 -*-
"""
Game State cho Xiangqi
Qu·∫£n l√Ω tr·∫°ng th√°i v√† logic c∆° b·∫£n c·ªßa game c·ªù t∆∞·ªõng
"""

from ..utils.constants import INITIAL_POSITION, BOARD_WIDTH, BOARD_HEIGHT


class GameState:
    """Class qu·∫£n l√Ω tr·∫°ng th√°i game c·ªù t∆∞·ªõng"""

    def __init__(self):
        """Kh·ªüi t·∫°o game state v·ªõi position ban ƒë·∫ßu"""
        self.board = self._create_initial_board()
        self.current_player = 'red'  # 'red' ho·∫∑c 'black'
        self.move_history = []
        self.game_status = 'playing'  # 'playing', 'checkmate', 'stalemate', 'draw'

        # FEN attributes
        self.active_color = 'w'  # 'w' for red/white, 'b' for black
        self.fullmove_number = 1
        self.halfmove_clock = 0
        self.game_over = False
        self.winner = None

        # Move history ƒë·ªÉ undo
        self.board_history = []  # L∆∞u tr·∫°ng th√°i board sau m·ªói n∆∞·ªõc ƒëi
        self.captured_pieces = []  # L∆∞u qu√¢n b·ªã b·∫Øt ƒë·ªÉ restore
        self.player_history = []  # L∆∞u l·ªãch s·ª≠ l∆∞·ª£t ch∆°i

        # Redo stacks
        self.redo_board_history = []
        self.redo_player_history = []
        self.redo_captured_pieces = []
        self.redo_move_history = []
        self.reset()

    def reset(self):
        """Reset game state v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu"""
        self.board = self._create_initial_board()
        self.current_player = 'red'
        self.move_history = []
        self.game_status = 'playing'
        self.active_color = 'w'
        self.fullmove_number = 1
        self.halfmove_clock = 0
        self.game_over = False
        self.winner = None

        # Clear move history
        self.board_history = []
        self.captured_pieces = []
        self.player_history = []

        # Clear redo stacks
        self.redo_board_history = []
        self.redo_player_history = []
        self.redo_captured_pieces = []
        self.redo_move_history = []

        print("üîÑ GameState reset v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu")

    def _parse_fen(self, fen):
        """Parse FEN string th√†nh board state"""
        board = [[None for _ in range(BOARD_WIDTH)]
                 for _ in range(BOARD_HEIGHT)]

        fen_parts = fen.split()
        board_fen = fen_parts[0]

        row = 0
        col = 0

        for char in board_fen:
            if char == '/':
                row += 1
                col = 0
            elif char.isdigit():
                col += int(char)
            else:
                if row < BOARD_HEIGHT and col < BOARD_WIDTH:
                    board[row][col] = char
                col += 1

        return board

    def to_fen(self):
        """
        Chuy·ªÉn game state hi·ªán t·∫°i th√†nh FEN string

        Returns:
            str: FEN notation
        """
        try:
            # Build board part
            fen_parts = []
            for row in self.board:
                rank_str = ""
                empty_count = 0

                for piece in row:
                    if piece is None:
                        empty_count += 1
                    else:
                        if empty_count > 0:
                            rank_str += str(empty_count)
                            empty_count = 0
                        rank_str += piece

                # Th√™m empty squares cu·ªëi rank
                if empty_count > 0:
                    rank_str += str(empty_count)

                fen_parts.append(rank_str)

            board_fen = "/".join(fen_parts)

            # Map current_player sang active_color cho FEN
            active_color = 'w' if self.current_player == 'red' else 'b'

            # Build complete FEN
            fen = f"{board_fen} {active_color}"
            return fen

        except Exception as e:
            print(f"‚ùå L·ªói generate FEN: {e}")
            return None

    def is_valid_move(self, from_row, from_col, to_row, to_col):
        """
        Ki·ªÉm tra n∆∞·ªõc ƒëi c√≥ h·ª£p l·ªá kh√¥ng

        Args:
            from_row, from_col: V·ªã tr√≠ xu·∫•t ph√°t
            to_row, to_col: V·ªã tr√≠ ƒë√≠ch

        Returns:
            bool: True n·∫øu n∆∞·ªõc ƒëi h·ª£p l·ªá
        """
        # Ki·ªÉm tra bounds
        if not self._is_valid_position(from_row, from_col) or not self._is_valid_position(to_row, to_col):
            return False

        # Ki·ªÉm tra c√≥ qu√¢n ·ªü v·ªã tr√≠ xu·∫•t ph√°t kh√¥ng
        piece = self.board[from_row][from_col]
        if piece is None:
            return False

        # Ki·ªÉm tra c√≥ ph·∫£i l∆∞·ª£t c·ªßa m√¨nh kh√¥ng
        if not self._is_player_piece(piece, self.current_player):
            return False

        # Ki·ªÉm tra kh√¥ng t·ª± ƒÉn qu√¢n m√¨nh
        target_piece = self.board[to_row][to_col]
        if target_piece and self._is_player_piece(target_piece, self.current_player):
            return False

        # Ki·ªÉm tra n∆∞·ªõc ƒëi theo lu·∫≠t t·ª´ng qu√¢n
        if not self._is_valid_piece_move(piece, from_row, from_col, to_row, to_col):
            return False

        # Ki·ªÉm tra kh√¥ng ƒë·ªÉ vua b·ªã chi·∫øu sau n∆∞·ªõc ƒëi
        if self._would_be_in_check_after_move(from_row, from_col, to_row, to_col):
            return False

        # Ki·ªÉm tra kh√¥ng vi ph·∫°m quy t·∫Øc t∆∞·ªõng ƒë·ªëi t∆∞·ªõng sau n∆∞·ªõc ƒëi
        if self._would_violate_flying_general_after_move(from_row, from_col, to_row, to_col):
            print(
                f"‚ùå N∆∞·ªõc ƒëi t·ª´ ({from_row},{from_col}) ƒë·∫øn ({to_row},{to_col}) vi ph·∫°m quy t·∫Øc t∆∞·ªõng ƒë·ªëi t∆∞·ªõng")
            return False

        return True

    def _is_valid_position(self, row, col):
        """Ki·ªÉm tra v·ªã tr√≠ c√≥ trong b√†n c·ªù kh√¥ng"""
        return 0 <= row < 10 and 0 <= col < 9

    def _is_player_piece(self, piece, player):
        """Ki·ªÉm tra qu√¢n c√≥ ph·∫£i c·ªßa player kh√¥ng"""
        if player == 'red':
            return piece.isupper()  # Red pieces are uppercase
        else:
            return piece.islower()  # Black pieces are lowercase

    def _is_valid_piece_move(self, piece, from_row, from_col, to_row, to_col):
        """
        Ki·ªÉm tra n∆∞·ªõc ƒëi c√≥ h·ª£p l·ªá theo lu·∫≠t c·ªßa t·ª´ng qu√¢n kh√¥ng
        """
        piece_type = piece.lower()

        if piece_type == 'k':  # King/General
            return self._is_valid_king_move(from_row, from_col, to_row, to_col)
        elif piece_type == 'a':  # Advisor
            return self._is_valid_advisor_move(from_row, from_col, to_row, to_col)
        elif piece_type == 'b':  # Bishop/Elephant
            return self._is_valid_bishop_move(from_row, from_col, to_row, to_col)
        elif piece_type == 'n':  # Knight/Horse
            return self._is_valid_knight_move(from_row, from_col, to_row, to_col)
        elif piece_type == 'r':  # Rook/Chariot
            return self._is_valid_rook_move(from_row, from_col, to_row, to_col)
        elif piece_type == 'c':  # Cannon
            return self._is_valid_cannon_move(from_row, from_col, to_row, to_col)
        elif piece_type == 'p':  # Pawn/Soldier
            return self._is_valid_pawn_move(piece, from_row, from_col, to_row, to_col)

        return False

    def _is_valid_king_move(self, from_row, from_col, to_row, to_col):
        """Ki·ªÉm tra n∆∞·ªõc ƒëi c·ªßa Vua/T∆∞·ªõng"""
        # Ch·ªâ di chuy·ªÉn 1 √¥ theo chi·ªÅu d·ªçc ho·∫∑c ngang
        if abs(from_row - to_row) + abs(from_col - to_col) != 1:
            return False

        # Ph·∫£i ·ªü trong cung
        if not self._is_in_palace(to_row, to_col):
            return False

        return True

    def _is_valid_advisor_move(self, from_row, from_col, to_row, to_col):
        """Ki·ªÉm tra n∆∞·ªõc ƒëi c·ªßa Sƒ©"""
        # Ch·ªâ di chuy·ªÉn ch√©o 1 √¥
        if abs(from_row - to_row) != 1 or abs(from_col - to_col) != 1:
            return False

        # Ph·∫£i ·ªü trong cung
        return self._is_in_palace(to_row, to_col)

    def _is_valid_bishop_move(self, from_row, from_col, to_row, to_col):
        """Ki·ªÉm tra n∆∞·ªõc ƒëi c·ªßa T∆∞·ª£ng/Voi"""
        # Di chuy·ªÉn ch√©o 2 √¥
        if abs(from_row - to_row) != 2 or abs(from_col - to_col) != 2:
            return False

        # Kh√¥ng ƒë∆∞·ª£c qua s√¥ng
        if not self._is_same_side_of_river(from_row, to_row):
            return False

        # Ki·ªÉm tra c√≥ b·ªã ch·∫∑n kh√¥ng (elephant eye)
        block_row = from_row + (to_row - from_row) // 2
        block_col = from_col + (to_col - from_col) // 2
        return self.board[block_row][block_col] is None

    def _is_valid_knight_move(self, from_row, from_col, to_row, to_col):
        """Ki·ªÉm tra n∆∞·ªõc ƒëi c·ªßa M√£"""
        row_diff = abs(from_row - to_row)
        col_diff = abs(from_col - to_col)

        # M√£ ƒëi ch·ªØ L (2-1 ho·∫∑c 1-2)
        if not ((row_diff == 2 and col_diff == 1) or (row_diff == 1 and col_diff == 2)):
            return False

        # Ki·ªÉm tra c√≥ b·ªã ch·∫∑n ch√¢n kh√¥ng
        if row_diff == 2:  # Di chuy·ªÉn theo chi·ªÅu d·ªçc
            block_row = from_row + (1 if to_row > from_row else -1)
            block_col = from_col
        else:  # Di chuy·ªÉn theo chi·ªÅu ngang
            block_row = from_row
            block_col = from_col + (1 if to_col > from_col else -1)

        return self.board[block_row][block_col] is None

    def _is_valid_rook_move(self, from_row, from_col, to_row, to_col):
        """Ki·ªÉm tra n∆∞·ªõc ƒëi c·ªßa Xe"""
        # Ch·ªâ di chuy·ªÉn theo ƒë∆∞·ªùng th·∫≥ng
        if from_row != to_row and from_col != to_col:
            return False

        # Ki·ªÉm tra ƒë∆∞·ªùng ƒëi c√≥ b·ªã ch·∫∑n kh√¥ng
        return self._is_path_clear(from_row, from_col, to_row, to_col)

    def _is_valid_cannon_move(self, from_row, from_col, to_row, to_col):
        """Ki·ªÉm tra n∆∞·ªõc ƒëi c·ªßa Ph√°o"""
        # Ch·ªâ di chuy·ªÉn theo ƒë∆∞·ªùng th·∫≥ng
        if from_row != to_row and from_col != to_col:
            return False

        target_piece = self.board[to_row][to_col]

        if target_piece is None:
            # Di chuy·ªÉn b√¨nh th∆∞·ªùng - ƒë∆∞·ªùng ph·∫£i tr·ªëng
            return self._is_path_clear(from_row, from_col, to_row, to_col)
        else:
            # B·∫Øn qu√¢n - ph·∫£i c√≥ ƒë√∫ng 1 qu√¢n l√†m gi√° ƒë·ª°
            return self._count_pieces_between(from_row, from_col, to_row, to_col) == 1

    def _is_valid_pawn_move(self, piece, from_row, from_col, to_row, to_col):
        """Ki·ªÉm tra n∆∞·ªõc ƒëi c·ªßa T·ªët/Binh"""
        is_red = piece.isupper()

        # Ch·ªâ di chuy·ªÉn 1 √¥
        if abs(from_row - to_row) + abs(from_col - to_col) != 1:
            return False

        # Tr∆∞·ªõc khi qua s√¥ng ch·ªâ ƒëi th·∫≥ng
        if not self._has_crossed_river(from_row, is_red):
            # Ch·ªâ ƒë∆∞·ª£c ƒëi th·∫≥ng
            if from_col != to_col:
                return False
            # ƒêi ƒë√∫ng h∆∞·ªõng
            if is_red:
                return to_row < from_row  # Red moves up (decreasing row)
            else:
                return to_row > from_row  # Black moves down (increasing row)
        else:
            # Sau khi qua s√¥ng c√≥ th·ªÉ ƒëi ngang ho·∫∑c ti·∫øn
            if from_row == to_row:  # Di chuy·ªÉn ngang
                return True
            else:  # Di chuy·ªÉn d·ªçc
                if is_red:
                    return to_row < from_row  # Red continues up
                else:
                    return to_row > from_row  # Black continues down

    def make_move(self, from_row, from_col, to_row, to_col):
        """
        Th·ª±c hi·ªán n∆∞·ªõc ƒëi v√† l∆∞u history ƒë·ªÉ undo

        Args:
            from_row, from_col: V·ªã tr√≠ xu·∫•t ph√°t
            to_row, to_col: V·ªã tr√≠ ƒë√≠ch

        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        # Validate move tr∆∞·ªõc
        if not self.is_valid_move(from_row, from_col, to_row, to_col):
            return False

        # Ki·ªÉm tra xem n∆∞·ªõc ƒëi c√≥ ƒë·ªÉ t∆∞·ªõng b·ªã chi·∫øu kh√¥ng
        if self._would_be_in_check_after_move(from_row, from_col, to_row, to_col):
            print("‚ùå N∆∞·ªõc ƒëi n√†y s·∫Ω ƒë·ªÉ t∆∞·ªõng b·ªã chi·∫øu")
            return False

        # Ki·ªÉm tra quy t·∫Øc t∆∞·ªõng ƒë·ªëi m·∫∑t
        if self._would_violate_flying_general_after_move(from_row, from_col, to_row, to_col):
            print("‚ùå N∆∞·ªõc ƒëi n√†y vi ph·∫°m quy t·∫Øc t∆∞·ªõng ƒë·ªëi m·∫∑t")
            return False

        # Clear redo stacks khi c√≥ n∆∞·ªõc ƒëi m·ªõi
        self.redo_board_history.clear()
        self.redo_player_history.clear()
        self.redo_captured_pieces.clear()
        self.redo_move_history.clear()

        # L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i ƒë·ªÉ undo
        self.board_history.append([row[:]
                                  for row in self.board])  # Deep copy board
        self.player_history.append(self.current_player)

        # L∆∞u qu√¢n b·ªã b·∫Øt
        captured_piece = self.board[to_row][to_col]
        self.captured_pieces.append(captured_piece)

        # Th·ª±c hi·ªán n∆∞·ªõc ƒëi
        piece = self.board[from_row][from_col]
        self.board[to_row][to_col] = piece
        self.board[from_row][from_col] = None

        # Chuy·ªÉn l∆∞·ª£t
        old_player = self.current_player
        self.current_player = 'black' if self.current_player == 'red' else 'red'
        self.active_color = 'b' if self.active_color == 'w' else 'w'

        # Update move history
        move_notation = f"{chr(ord('a') + from_col)}{from_row}{chr(ord('a') + to_col)}{to_row}"
        self.move_history.append(move_notation)

        print(f"‚úì GameState: Th·ª±c hi·ªán n∆∞·ªõc ƒëi {move_notation}")

        # Ki·ªÉm tra game over sau n∆∞·ªõc ƒëi
        self._check_game_over()

        return True

    def undo_move(self):
        """
        Ho√†n t√°c n∆∞·ªõc ƒëi cu·ªëi c√πng

        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        if not self.board_history:
            print("‚ùå Kh√¥ng c√≥ n∆∞·ªõc ƒëi ƒë·ªÉ ho√†n t√°c")
            return False

        # L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i v√†o redo stacks
        self.redo_board_history.append([row[:] for row in self.board])
        self.redo_player_history.append(self.current_player)
        self.redo_captured_pieces.append(
            self.captured_pieces[-1] if self.captured_pieces else None)
        self.redo_move_history.append(
            self.move_history[-1] if self.move_history else "unknown")

        # Restore board state
        self.board = self.board_history.pop()

        # Restore player
        self.current_player = self.player_history.pop()
        self.active_color = 'w' if self.current_player == 'red' else 'b'

        # Remove captured piece t·ª´ history
        self.captured_pieces.pop()

        # Remove move t·ª´ history
        undone_move = self.move_history.pop() if self.move_history else "unknown"

        print(f"‚úì GameState: Ho√†n t√°c n∆∞·ªõc ƒëi {undone_move}")
        return True

    def can_undo(self):
        """Ki·ªÉm tra c√≥ th·ªÉ undo kh√¥ng"""
        return len(self.board_history) > 0

    def redo_move(self):
        """
        L√†m l·∫°i n∆∞·ªõc ƒëi ƒë√£ ho√†n t√°c

        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        if not self.redo_board_history:
            print("‚ùå Kh√¥ng c√≥ n∆∞·ªõc ƒëi ƒë·ªÉ l√†m l·∫°i")
            return False

        # L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i v√†o undo stacks
        self.board_history.append([row[:] for row in self.board])
        self.player_history.append(self.current_player)

        # Restore t·ª´ redo stacks
        self.board = self.redo_board_history.pop()
        self.current_player = self.redo_player_history.pop()
        self.active_color = 'w' if self.current_player == 'red' else 'b'

        # Restore captured piece v√† move
        captured_piece = self.redo_captured_pieces.pop()
        redone_move = self.redo_move_history.pop()

        self.captured_pieces.append(captured_piece)
        self.move_history.append(redone_move)

        print(f"‚úì GameState: L√†m l·∫°i n∆∞·ªõc ƒëi {redone_move}")
        return True

    def can_redo(self):
        """Ki·ªÉm tra c√≥ th·ªÉ redo kh√¥ng"""
        return len(self.redo_board_history) > 0

    def get_possible_moves(self, pos):
        """
        L·∫•y danh s√°ch n∆∞·ªõc ƒëi c√≥ th·ªÉ t·ª´ v·ªã tr√≠

        Args:
            pos: V·ªã tr√≠ d·∫°ng string (e.g., "a0")

        Returns:
            list: Danh s√°ch v·ªã tr√≠ c√≥ th·ªÉ di chuy·ªÉn ƒë·∫øn
        """
        row, col = self._pos_to_coords(pos)

        if not self._is_valid_coords(row, col):
            return []

        piece = self.board[row][col]
        if piece is None:
            return []

        # TODO: Implement logic cho t·ª´ng lo·∫°i qu√¢n c·ªù
        # Hi·ªán t·∫°i return empty list
        return []

    def _pos_to_coords(self, pos):
        """Chuy·ªÉn ƒë·ªïi position string th√†nh coordinates"""
        col = ord(pos[0]) - ord('a')
        row = int(pos[1])
        return row, col

    def _coords_to_pos(self, row, col):
        """Chuy·ªÉn ƒë·ªïi coordinates th√†nh position string"""
        return f"{chr(ord('a') + col)}{row}"

    def _is_valid_coords(self, row, col):
        """Ki·ªÉm tra coordinates c√≥ h·ª£p l·ªá kh√¥ng"""
        return 0 <= row < BOARD_HEIGHT and 0 <= col < BOARD_WIDTH

    def _check_game_over(self):
        """Ki·ªÉm tra game ƒë√£ k·∫øt th√∫c ch∆∞a"""
        current = self.current_player

        if self.is_checkmate(current):
            winner = 'black' if current == 'red' else 'red'
            print(f"üèÜ {winner.upper()} th·∫Øng! {current.upper()} b·ªã chi·∫øu b√≠")
            return True

        if self.is_stalemate(current):
            print("ü§ù H√≤a c·ªù! Kh√¥ng c√≥ n∆∞·ªõc ƒëi h·ª£p l·ªá")
            return True

        if self.is_in_check(current):
            print(f"‚ö†Ô∏è  {current.upper()} ƒëang b·ªã chi·∫øu!")

        return False

    def is_in_check(self, player=None):
        """
        Ki·ªÉm tra c√≥ b·ªã chi·∫øu t∆∞·ªõng kh√¥ng

        Args:
            player: "red" ho·∫∑c "black", None ƒë·ªÉ d√πng current_player

        Returns:
            bool: True n·∫øu b·ªã chi·∫øu t∆∞·ªõng
        """
        if player is None:
            player = self.current_player

        # T√¨m vua c·ªßa player
        king_piece = 'K' if player == 'red' else 'k'
        king_pos = None

        for row in range(10):
            for col in range(9):
                if self.board[row][col] == king_piece:
                    king_pos = (row, col)
                    break

        if not king_pos:
            return False  # Kh√¥ng t√¨m th·∫•y vua

        # Ki·ªÉm tra c√≥ qu√¢n ƒë·ªëi ph∆∞∆°ng n√†o c√≥ th·ªÉ t·∫•n c√¥ng vua kh√¥ng
        opponent_player = 'black' if player == 'red' else 'red'

        for row in range(10):
            for col in range(9):
                enemy_piece = self.board[row][col]
                if enemy_piece and self._is_player_piece(enemy_piece, opponent_player):
                    # T·∫°m th·ªùi set current_player ƒë·ªÉ ki·ªÉm tra
                    old_player = self.current_player
                    self.current_player = opponent_player

                    # Ki·ªÉm tra qu√¢n ƒë·ªãch c√≥ th·ªÉ t·∫•n c√¥ng vua kh√¥ng
                    can_attack = self._is_valid_piece_move(
                        enemy_piece, row, col, king_pos[0], king_pos[1])

                    # Restore
                    self.current_player = old_player

                    if can_attack:
                        return True  # B·ªã chi·∫øu

        return False  # Kh√¥ng b·ªã chi·∫øu

    def get_board_copy(self):
        """L·∫•y copy c·ªßa board hi·ªán t·∫°i"""
        return [row[:] for row in self.board]

    def load_from_fen(self, fen_string):
        """
        Load game state t·ª´ FEN string

        Xiangqi FEN format: 
        "rnbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/1C5C1/9/RNBAKABNR w"

        Args:
            fen_string: FEN notation string

        Returns:
            bool: True n·∫øu load th√†nh c√¥ng
        """
        try:
            parts = fen_string.strip().split()
            if len(parts) < 1:
                return False

            # Parse board position (ph·∫ßn ƒë·∫ßu ti√™n)
            board_fen = parts[0]
            new_board = self._parse_board_from_fen(board_fen)
            if new_board is None:
                return False

            # Update board state
            self.board = new_board

            # Parse c√°c th√¥ng tin kh√°c n·∫øu c√≥
            if len(parts) >= 2:
                self.active_color = parts[1]  # 'w' ho·∫∑c 'b'
                # Map active_color sang current_player
                if self.active_color == 'w':
                    self.current_player = 'red'  # White = Red trong xiangqi
                elif self.active_color == 'b':
                    self.current_player = 'black'  # Black = Black

            if len(parts) >= 6:
                self.fullmove_number = int(parts[5])

            print(f"‚úì Load FEN th√†nh c√¥ng: {fen_string[:50]}...")
            print(
                f"‚úì Active color: {self.active_color} ‚Üí Current player: {self.current_player}")
            return True

        except Exception as e:
            print(f"‚ùå L·ªói parse FEN: {e}")
            return False

    def _parse_board_from_fen(self, board_fen):
        """
        Parse board position t·ª´ FEN notation

        Args:
            board_fen: Board part c·ªßa FEN string

        Returns:
            list: 2D array representing board ho·∫∑c None n·∫øu l·ªói
        """
        try:
            # T·∫°o board r·ªóng 10x9
            board = [[None for _ in range(9)] for _ in range(10)]

            ranks = board_fen.split('/')
            if len(ranks) != 10:  # Xiangqi c√≥ 10 h√†ng
                print(f"‚ùå FEN sai: c·∫ßn 10 ranks, c√≥ {len(ranks)}")
                return None

            for rank_idx, rank in enumerate(ranks):
                col_idx = 0
                for char in rank:
                    if char.isdigit():
                        # S·ªë √¥ tr·ªëng
                        col_idx += int(char)
                    else:
                        # Qu√¢n c·ªù
                        if col_idx >= 9:  # Xiangqi c√≥ 9 c·ªôt
                            print(
                                f"‚ùå FEN sai: qu√° nhi·ªÅu pieces ·ªü rank {rank_idx}")
                            return None
                        board[rank_idx][col_idx] = char
                        col_idx += 1

                if col_idx != 9:
                    print(
                        f"‚ùå FEN sai: rank {rank_idx} c√≥ {col_idx} columns thay v√¨ 9")
                    return None

            return board

        except Exception as e:
            print(f"‚ùå L·ªói parse board FEN: {e}")
            return None

    def _create_initial_board(self):
        """T·∫°o board v·ªõi position ban ƒë·∫ßu c·ªßa xiangqi"""
        # T·∫°o board r·ªóng 10x9
        board = [[None for _ in range(9)] for _ in range(10)]

        # Black pieces (h√†ng 0-2)
        board[0] = ['r', 'n', 'b', 'a', 'k', 'a', 'b', 'n', 'r']
        board[2] = [None, 'c', None, None, None, None, None, 'c', None]
        board[3] = ['p', None, 'p', None, 'p', None, 'p', None, 'p']

        # Red pieces (h√†ng 6-9)
        board[6] = ['P', None, 'P', None, 'P', None, 'P', None, 'P']
        board[7] = [None, 'C', None, None, None, None, None, 'C', None]
        board[9] = ['R', 'N', 'B', 'A', 'K', 'A', 'B', 'N', 'R']

        return board

    def _is_in_palace(self, row, col):
        """Ki·ªÉm tra v·ªã tr√≠ c√≥ trong cung kh√¥ng"""
        # Red palace: rows 7-9, cols 3-5
        # Black palace: rows 0-2, cols 3-5
        return (3 <= col <= 5) and ((0 <= row <= 2) or (7 <= row <= 9))

    def _is_same_side_of_river(self, from_row, to_row):
        """Ki·ªÉm tra c√≥ c√πng b√™n s√¥ng kh√¥ng (cho t∆∞·ª£ng/voi)"""
        # River is between rows 4 and 5
        return (from_row <= 4 and to_row <= 4) or (from_row >= 5 and to_row >= 5)

    def _has_crossed_river(self, row, is_red):
        """Ki·ªÉm tra t·ªët/binh ƒë√£ qua s√¥ng ch∆∞a"""
        if is_red:
            return row <= 4  # Red crosses at row 4
        else:
            return row >= 5  # Black crosses at row 5

    def _is_path_clear(self, from_row, from_col, to_row, to_col):
        """Ki·ªÉm tra ƒë∆∞·ªùng ƒëi c√≥ tr·ªëng kh√¥ng (cho xe)"""
        if from_row == to_row:  # Horizontal move
            start_col = min(from_col, to_col) + 1
            end_col = max(from_col, to_col)
            for col in range(start_col, end_col):
                if self.board[from_row][col] is not None:
                    return False
        else:  # Vertical move
            start_row = min(from_row, to_row) + 1
            end_row = max(from_row, to_row)
            for row in range(start_row, end_row):
                if self.board[row][from_col] is not None:
                    return False
        return True

    def _count_pieces_between(self, from_row, from_col, to_row, to_col):
        """ƒê·∫øm s·ªë qu√¢n c·ªù gi·ªØa 2 v·ªã tr√≠ (cho ph√°o)"""
        count = 0
        if from_row == to_row:  # Horizontal
            start_col = min(from_col, to_col) + 1
            end_col = max(from_col, to_col)
            for col in range(start_col, end_col):
                if self.board[from_row][col] is not None:
                    count += 1
        else:  # Vertical
            start_row = min(from_row, to_row) + 1
            end_row = max(from_row, to_row)
            for row in range(start_row, end_row):
                if self.board[row][from_col] is not None:
                    count += 1
        return count

    def _check_flying_general_rule(self, from_row, from_col, to_row, to_col):
        """Ki·ªÉm tra lu·∫≠t t∆∞·ªõng ƒë·ªëi t∆∞·ªõng"""
        # T·∫°o board t·∫°m th·ªùi sau n∆∞·ªõc ƒëi
        temp_board = [row[:] for row in self.board]
        temp_board[to_row][to_col] = temp_board[from_row][from_col]
        temp_board[from_row][from_col] = None

        # T√¨m v·ªã tr√≠ 2 vua
        red_king_pos = None
        black_king_pos = None

        for row in range(10):
            for col in range(9):
                piece = temp_board[row][col]
                if piece == 'K':
                    red_king_pos = (row, col)
                elif piece == 'k':
                    black_king_pos = (row, col)

        if not red_king_pos or not black_king_pos:
            # Kh√¥ng t√¨m th·∫•y vua (kh√¥ng b√¨nh th∆∞·ªùng nh∆∞ng kh√¥ng block move)
            return True

        # Ki·ªÉm tra c√≥ c√πng c·ªôt v√† kh√¥ng c√≥ qu√¢n n√†o ch·∫∑n gi·ªØa
        if red_king_pos[1] == black_king_pos[1]:  # Same column
            start_row = min(red_king_pos[0], black_king_pos[0]) + 1
            end_row = max(red_king_pos[0], black_king_pos[0])
            for row in range(start_row, end_row):
                if temp_board[row][red_king_pos[1]] is not None:
                    return True  # C√≥ qu√¢n ch·∫∑n gi·ªØa, OK
            return False  # Kh√¥ng c√≥ qu√¢n ch·∫∑n, vi ph·∫°m lu·∫≠t

        return True  # Kh√¥ng c√πng c·ªôt, OK

    def _would_be_in_check_after_move(self, from_row, from_col, to_row, to_col):
        """Ki·ªÉm tra sau n∆∞·ªõc ƒëi c√≥ b·ªã chi·∫øu kh√¥ng"""
        # T·∫°o board t·∫°m th·ªùi
        temp_board = [row[:] for row in self.board]
        piece = temp_board[from_row][from_col]
        temp_board[to_row][to_col] = piece
        temp_board[from_row][from_col] = None

        # T√¨m vua c·ªßa m√¨nh
        king_piece = 'K' if self.current_player == 'red' else 'k'
        king_pos = None

        for row in range(10):
            for col in range(9):
                if temp_board[row][col] == king_piece:
                    king_pos = (row, col)
                    break

        if not king_pos:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y vua {king_piece} tr√™n b√†n c·ªù")
            return False  # Kh√¥ng t√¨m th·∫•y vua

        # Ki·ªÉm tra c√≥ qu√¢n ƒë·ªëi ph∆∞∆°ng n√†o c√≥ th·ªÉ t·∫•n c√¥ng vua kh√¥ng
        opponent_player = 'black' if self.current_player == 'red' else 'red'

        for row in range(10):
            for col in range(9):
                enemy_piece = temp_board[row][col]
                if enemy_piece and self._is_player_piece(enemy_piece, opponent_player):
                    # T·∫°m th·ªùi set board ƒë·ªÉ ki·ªÉm tra
                    old_board = self.board
                    self.board = temp_board
                    old_player = self.current_player
                    self.current_player = opponent_player

                    # Ki·ªÉm tra qu√¢n ƒë·ªãch c√≥ th·ªÉ t·∫•n c√¥ng vua kh√¥ng
                    can_attack = self._is_valid_piece_move(
                        enemy_piece, row, col, king_pos[0], king_pos[1])

                    # Restore
                    self.board = old_board
                    self.current_player = old_player

                    if can_attack:
                        print(
                            f"üö® N∆∞·ªõc ƒëi t·ª´ ({from_row},{from_col}) ƒë·∫øn ({to_row},{to_col}) s·∫Ω ƒë·ªÉ {king_piece} t·∫°i {king_pos} b·ªã chi·∫øu b·ªüi {enemy_piece} t·∫°i ({row},{col})")
                        return True  # B·ªã chi·∫øu

        return False  # Kh√¥ng b·ªã chi·∫øu

    def _would_violate_flying_general_after_move(self, from_row, from_col, to_row, to_col):
        """Ki·ªÉm tra sau n∆∞·ªõc ƒëi c√≥ vi ph·∫°m quy t·∫Øc t∆∞·ªõng ƒë·ªëi m·∫∑t kh√¥ng"""
        # T·∫°o board t·∫°m th·ªùi
        temp_board = [row[:] for row in self.board]
        piece = temp_board[from_row][from_col]
        temp_board[to_row][to_col] = piece
        temp_board[from_row][from_col] = None

        # T√¨m v·ªã tr√≠ 2 vua
        red_king_pos = None
        black_king_pos = None

        for row in range(10):
            for col in range(9):
                piece = temp_board[row][col]
                if piece == 'K':
                    red_king_pos = (row, col)
                elif piece == 'k':
                    black_king_pos = (row, col)

        if not red_king_pos or not black_king_pos:
            # Kh√¥ng t√¨m th·∫•y vua (kh√¥ng b√¨nh th∆∞·ªùng nh∆∞ng kh√¥ng block move)
            return False

        # Ki·ªÉm tra c√≥ c√πng c·ªôt v√† kh√¥ng c√≥ qu√¢n n√†o ch·∫∑n gi·ªØa
        if red_king_pos[1] == black_king_pos[1]:  # Same column
            start_row = min(red_king_pos[0], black_king_pos[0]) + 1
            end_row = max(red_king_pos[0], black_king_pos[0])
            for row in range(start_row, end_row):
                if temp_board[row][red_king_pos[1]] is not None:
                    return False  # C√≥ qu√¢n ch·∫∑n gi·ªØa, OK
            return True  # Kh√¥ng c√≥ qu√¢n ch·∫∑n, vi ph·∫°m lu·∫≠t t∆∞·ªõng ƒë·ªëi m·∫∑t

        return False  # Kh√¥ng c√πng c·ªôt, OK

    def is_checkmate(self, player=None):
        """
        Ki·ªÉm tra c√≥ b·ªã chi·∫øu b√≠ (checkmate) kh√¥ng

        Args:
            player: "red" ho·∫∑c "black", None ƒë·ªÉ d√πng current_player

        Returns:
            bool: True n·∫øu b·ªã chi·∫øu b√≠
        """
        if player is None:
            player = self.current_player

        # N·∫øu kh√¥ng b·ªã chi·∫øu th√¨ kh√¥ng th·ªÉ b·ªã chi·∫øu b√≠
        if not self.is_in_check(player):
            return False

        # Th·ª≠ t·∫•t c·∫£ n∆∞·ªõc ƒëi c√≥ th·ªÉ c·ªßa player
        for from_row in range(10):
            for from_col in range(9):
                piece = self.board[from_row][from_col]
                if piece and self._is_player_piece(piece, player):
                    # Th·ª≠ t·∫•t c·∫£ v·ªã tr√≠ c√≥ th·ªÉ ƒëi ƒë·∫øn
                    for to_row in range(10):
                        for to_col in range(9):
                            # Ki·ªÉm tra n∆∞·ªõc ƒëi c√≥ h·ª£p l·ªá kh√¥ng
                            if self.is_valid_move(from_row, from_col, to_row, to_col):
                                # Th·ª≠ n∆∞·ªõc ƒëi t·∫°m th·ªùi
                                temp_board = [row[:] for row in self.board]
                                temp_board[to_row][to_col] = temp_board[from_row][from_col]
                                temp_board[from_row][from_col] = None

                                # Ki·ªÉm tra sau n∆∞·ªõc ƒëi c√≥ c√≤n b·ªã chi·∫øu kh√¥ng
                                old_board = self.board
                                self.board = temp_board
                                still_in_check = self.is_in_check(player)
                                self.board = old_board

                                if not still_in_check:
                                    return False  # C√≥ n∆∞·ªõc ƒëi tho√°t ƒë∆∞·ª£c, kh√¥ng ph·∫£i checkmate

        return True  # Kh√¥ng c√≥ n∆∞·ªõc ƒëi n√†o tho√°t ƒë∆∞·ª£c, checkmate

    def is_stalemate(self, player=None):
        """
        Ki·ªÉm tra c√≥ b·ªã h√≤a c·ªù (stalemate) kh√¥ng

        Args:
            player: "red" ho·∫∑c "black", None ƒë·ªÉ d√πng current_player

        Returns:
            bool: True n·∫øu b·ªã stalemate
        """
        if player is None:
            player = self.current_player

        # N·∫øu b·ªã chi·∫øu th√¨ kh√¥ng th·ªÉ stalemate
        if self.is_in_check(player):
            return False

        # Th·ª≠ t·∫•t c·∫£ n∆∞·ªõc ƒëi c√≥ th·ªÉ c·ªßa player
        for from_row in range(10):
            for from_col in range(9):
                piece = self.board[from_row][from_col]
                if piece and self._is_player_piece(piece, player):
                    # Th·ª≠ t·∫•t c·∫£ v·ªã tr√≠ c√≥ th·ªÉ ƒëi ƒë·∫øn
                    for to_row in range(10):
                        for to_col in range(9):
                            # Ki·ªÉm tra n∆∞·ªõc ƒëi c√≥ h·ª£p l·ªá kh√¥ng
                            if self.is_valid_move(from_row, from_col, to_row, to_col):
                                return False  # C√≥ n∆∞·ªõc ƒëi h·ª£p l·ªá, kh√¥ng ph·∫£i stalemate

        return True  # Kh√¥ng c√≥ n∆∞·ªõc ƒëi h·ª£p l·ªá n√†o, stalemate
